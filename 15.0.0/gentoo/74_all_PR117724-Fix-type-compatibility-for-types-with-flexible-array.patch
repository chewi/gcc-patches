From 511aac7c85e6cc2ce474e1169dadd17c570743ec Mon Sep 17 00:00:00 2001
Message-ID: <511aac7c85e6cc2ce474e1169dadd17c570743ec.1733842378.git.sam@gentoo.org>
From: Martin Uecker <uecker@tugraz.at>
Date: Tue, 10 Dec 2024 13:29:27 +0100
Subject: [PATCH 1/2] Fix type compatibility for types with flexible array
 member [PR113688,PR114713,PR117724]
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

As requested, I split up into one part for the TYPE_MODE andÂ 
another one for the array size to help with git bisecting.  This
is the first part.

Bootstrapped and regression tested on x86_64.

Allow the TYPE_MODE of a type with an array as last member to differ from
another compatible type.

gcc/ChangeLog:
        * tree.cc (gimple_canonical_types_compatible_p): Add exception.
        (verify_type): Add exception.

gcc/lto/ChangeLog:
        * lto-common.cc (hash_canonical_type): Add exception.
---
 gcc/lto/lto-common.cc |  3 ++-
 gcc/tree.cc           | 12 +++++++++---
 2 files changed, 11 insertions(+), 4 deletions(-)

diff --git a/gcc/lto/lto-common.cc b/gcc/lto/lto-common.cc
index 86a309f92b40..940502099128 100644
--- a/gcc/lto/lto-common.cc
+++ b/gcc/lto/lto-common.cc
@@ -254,7 +254,8 @@ hash_canonical_type (tree type)
      checked.  */
   code = tree_code_for_canonical_type_merging (TREE_CODE (type));
   hstate.add_int (code);
-  hstate.add_int (TYPE_MODE (type));
+  if (!RECORD_OR_UNION_TYPE_P (type))
+    hstate.add_int (TYPE_MODE (type));
 
   /* Incorporate common features of numerical types.  */
   if (INTEGRAL_TYPE_P (type)
diff --git a/gcc/tree.cc b/gcc/tree.cc
index 83a03374a325..1391af6bd4c3 100644
--- a/gcc/tree.cc
+++ b/gcc/tree.cc
@@ -13914,8 +13914,11 @@ gimple_canonical_types_compatible_p (const_tree t1, const_tree t2,
       || TREE_CODE (t1) == NULLPTR_TYPE)
     return true;
 
-  /* Can't be the same type if they have different mode.  */
-  if (TYPE_MODE (t1) != TYPE_MODE (t2))
+  /* Can't be compatible types if they have different mode.  Because of
+     flexible array members, we allow mismatching modes for structures or
+     unions.  */
+  if (!RECORD_OR_UNION_TYPE_P (t1)
+      && TYPE_MODE (t1) != TYPE_MODE (t2))
     return false;
 
   /* Non-aggregate types can be handled cheaply.  */
@@ -14218,8 +14221,11 @@ verify_type (const_tree t)
       debug_tree (ct);
       error_found = true;
     }
-
   if (COMPLETE_TYPE_P (t) && TYPE_CANONICAL (t)
+      /* We allow a mismatch for structure or union because of
+	 flexible array members.  */
+      && !RECORD_OR_UNION_TYPE_P (t)
+      && !RECORD_OR_UNION_TYPE_P (TYPE_CANONICAL (t))
       && TYPE_MODE (t) != TYPE_MODE (TYPE_CANONICAL (t)))
     {
       error ("%<TYPE_MODE%> of %<TYPE_CANONICAL%> is not compatible");

base-commit: 34dfb30ca8dba6bc184e563b0ddc26a5239294e3
-- 
2.47.1

