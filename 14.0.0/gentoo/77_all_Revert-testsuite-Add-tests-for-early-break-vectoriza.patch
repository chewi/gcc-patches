From 3283ec82265c4bd51a2d113ebe44310169614650 Mon Sep 17 00:00:00 2001
From: Sam James <sam@gentoo.org>
Date: Mon, 25 Dec 2023 16:57:13 +0000
Subject: [PATCH 3/7] Revert "testsuite: Add tests for early break
 vectorization"

This reverts commit c5232ec14937a34e599e9e386a5975fab9a5e283.

Bug: https://gcc.gnu.org/PR113135
Bug: https://gcc.gnu.org/PR113136
Bug: https://gcc.gnu.org/PR113137
Signed-off-by: Sam James <sam@gentoo.org>
---
 gcc/doc/sourcebuild.texi                      |  13 -
 .../g++.dg/vect/vect-early-break_1.cc         |  62 -----
 .../g++.dg/vect/vect-early-break_2.cc         |  61 -----
 .../g++.dg/vect/vect-early-break_3.cc         |  17 --
 .../gcc.dg/vect/vect-early-break-run_1.c      |  11 -
 .../gcc.dg/vect/vect-early-break-run_10.c     |  11 -
 .../gcc.dg/vect/vect-early-break-run_2.c      |  11 -
 .../gcc.dg/vect/vect-early-break-run_3.c      |  11 -
 .../gcc.dg/vect/vect-early-break-run_4.c      |  11 -
 .../gcc.dg/vect/vect-early-break-run_5.c      |  11 -
 .../gcc.dg/vect/vect-early-break-run_6.c      |  11 -
 .../gcc.dg/vect/vect-early-break-run_7.c      |  11 -
 .../gcc.dg/vect/vect-early-break-run_8.c      |  11 -
 .../gcc.dg/vect/vect-early-break-run_9.c      |  11 -
 .../gcc.dg/vect/vect-early-break-template_1.c |  50 ----
 .../gcc.dg/vect/vect-early-break-template_2.c |  53 ----
 .../gcc.dg/vect/vect-early-break_1.c          |  28 ---
 .../gcc.dg/vect/vect-early-break_10.c         |  29 ---
 .../gcc.dg/vect/vect-early-break_11.c         |  32 ---
 .../gcc.dg/vect/vect-early-break_12.c         |  32 ---
 .../gcc.dg/vect/vect-early-break_13.c         |  28 ---
 .../gcc.dg/vect/vect-early-break_14.c         |  26 --
 .../gcc.dg/vect/vect-early-break_15.c         |  26 --
 .../gcc.dg/vect/vect-early-break_16.c         |  26 --
 .../gcc.dg/vect/vect-early-break_17.c         |  26 --
 .../gcc.dg/vect/vect-early-break_18.c         |  28 ---
 .../gcc.dg/vect/vect-early-break_19.c         |  28 ---
 .../gcc.dg/vect/vect-early-break_2.c          |  28 ---
 .../gcc.dg/vect/vect-early-break_20.c         |  38 ---
 .../gcc.dg/vect/vect-early-break_21.c         |  38 ---
 .../gcc.dg/vect/vect-early-break_22.c         |  45 ----
 .../gcc.dg/vect/vect-early-break_23.c         |  65 -----
 .../gcc.dg/vect/vect-early-break_24.c         |  46 ----
 .../gcc.dg/vect/vect-early-break_25.c         |  11 -
 .../gcc.dg/vect/vect-early-break_26.c         |  44 ----
 .../gcc.dg/vect/vect-early-break_27.c         |  19 --
 .../gcc.dg/vect/vect-early-break_28.c         |  16 --
 .../gcc.dg/vect/vect-early-break_29.c         |  17 --
 .../gcc.dg/vect/vect-early-break_3.c          |  21 --
 .../gcc.dg/vect/vect-early-break_30.c         |  29 ---
 .../gcc.dg/vect/vect-early-break_31.c         |  30 ---
 .../gcc.dg/vect/vect-early-break_32.c         |  30 ---
 .../gcc.dg/vect/vect-early-break_33.c         |  29 ---
 .../gcc.dg/vect/vect-early-break_34.c         |  28 ---
 .../gcc.dg/vect/vect-early-break_35.c         |  29 ---
 .../gcc.dg/vect/vect-early-break_36.c         |  29 ---
 .../gcc.dg/vect/vect-early-break_37.c         |  26 --
 .../gcc.dg/vect/vect-early-break_38.c         |  26 --
 .../gcc.dg/vect/vect-early-break_39.c         |  26 --
 .../gcc.dg/vect/vect-early-break_4.c          |  24 --
 .../gcc.dg/vect/vect-early-break_40.c         |  27 --
 .../gcc.dg/vect/vect-early-break_41.c         |  25 --
 .../gcc.dg/vect/vect-early-break_42.c         |  26 --
 .../gcc.dg/vect/vect-early-break_43.c         |  30 ---
 .../gcc.dg/vect/vect-early-break_44.c         |  30 ---
 .../gcc.dg/vect/vect-early-break_45.c         |  26 --
 .../gcc.dg/vect/vect-early-break_46.c         |  28 ---
 .../gcc.dg/vect/vect-early-break_47.c         |  26 --
 .../gcc.dg/vect/vect-early-break_48.c         |  14 --
 .../gcc.dg/vect/vect-early-break_49.c         |  25 --
 .../gcc.dg/vect/vect-early-break_5.c          |  25 --
 .../gcc.dg/vect/vect-early-break_50.c         |  18 --
 .../gcc.dg/vect/vect-early-break_51.c         |  26 --
 .../gcc.dg/vect/vect-early-break_52.c         |  21 --
 .../gcc.dg/vect/vect-early-break_53.c         |  18 --
 .../gcc.dg/vect/vect-early-break_54.c         |  30 ---
 .../gcc.dg/vect/vect-early-break_55.c         |  29 ---
 .../gcc.dg/vect/vect-early-break_56.c         | 102 --------
 .../gcc.dg/vect/vect-early-break_57.c         |  32 ---
 .../gcc.dg/vect/vect-early-break_58.c         |  19 --
 .../gcc.dg/vect/vect-early-break_59.c         |  18 --
 .../gcc.dg/vect/vect-early-break_6.c          |  27 --
 .../gcc.dg/vect/vect-early-break_60.c         |  18 --
 .../gcc.dg/vect/vect-early-break_61.c         |  18 --
 .../gcc.dg/vect/vect-early-break_62.c         |  21 --
 .../gcc.dg/vect/vect-early-break_63.c         |  29 ---
 .../gcc.dg/vect/vect-early-break_64.c         |  18 --
 .../gcc.dg/vect/vect-early-break_65.c         |  20 --
 .../gcc.dg/vect/vect-early-break_66.c         |  28 ---
 .../gcc.dg/vect/vect-early-break_67.c         |  42 ----
 .../gcc.dg/vect/vect-early-break_68.c         |  42 ----
 .../gcc.dg/vect/vect-early-break_69.c         |  80 ------
 .../gcc.dg/vect/vect-early-break_7.c          |  28 ---
 .../gcc.dg/vect/vect-early-break_70.c         |  69 ------
 .../gcc.dg/vect/vect-early-break_71.c         |  71 ------
 .../gcc.dg/vect/vect-early-break_72.c         | 151 -----------
 .../gcc.dg/vect/vect-early-break_73.c         |  71 ------
 .../gcc.dg/vect/vect-early-break_74.c         | 165 ------------
 .../gcc.dg/vect/vect-early-break_75.c         | 234 ------------------
 .../gcc.dg/vect/vect-early-break_76.c         | 169 -------------
 .../gcc.dg/vect/vect-early-break_77.c         |  34 ---
 .../gcc.dg/vect/vect-early-break_78.c         |  77 ------
 .../gcc.dg/vect/vect-early-break_79.c         |  28 ---
 .../gcc.dg/vect/vect-early-break_8.c          |  28 ---
 .../gcc.dg/vect/vect-early-break_80.c         |  49 ----
 .../gcc.dg/vect/vect-early-break_81.c         |  31 ---
 .../gcc.dg/vect/vect-early-break_82.c         |  28 ---
 .../gcc.dg/vect/vect-early-break_83.c         |  29 ---
 .../gcc.dg/vect/vect-early-break_84.c         |  44 ----
 .../gcc.dg/vect/vect-early-break_85.c         |  40 ---
 .../gcc.dg/vect/vect-early-break_86.c         |  26 --
 .../gcc.dg/vect/vect-early-break_87.c         |  26 --
 .../gcc.dg/vect/vect-early-break_88.c         |  41 ---
 .../gcc.dg/vect/vect-early-break_89.c         |  21 --
 .../gcc.dg/vect/vect-early-break_9.c          |  28 ---
 .../gcc.dg/vect/vect-early-break_90.c         |  48 ----
 .../gcc.dg/vect/vect-early-break_91.c         |  48 ----
 .../gcc.dg/vect/vect-early-break_92.c         |  48 ----
 .../gcc.dg/vect/vect-early-break_93.c         |  48 ----
 gcc/testsuite/lib/target-supports.exp         |  38 ---
 110 files changed, 4025 deletions(-)
 delete mode 100644 gcc/testsuite/g++.dg/vect/vect-early-break_1.cc
 delete mode 100644 gcc/testsuite/g++.dg/vect/vect-early-break_2.cc
 delete mode 100644 gcc/testsuite/g++.dg/vect/vect-early-break_3.cc
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break-run_1.c
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break-run_10.c
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break-run_2.c
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break-run_3.c
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break-run_4.c
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break-run_5.c
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break-run_6.c
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break-run_7.c
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break-run_8.c
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break-run_9.c
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break-template_1.c
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break-template_2.c
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break_1.c
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break_10.c
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break_11.c
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break_12.c
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break_13.c
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break_14.c
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break_15.c
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break_16.c
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break_17.c
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break_18.c
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break_19.c
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break_2.c
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break_20.c
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break_21.c
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break_22.c
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break_23.c
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break_24.c
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break_25.c
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break_26.c
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break_27.c
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break_28.c
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break_29.c
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break_3.c
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break_30.c
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break_31.c
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break_32.c
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break_33.c
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break_34.c
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break_35.c
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break_36.c
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break_37.c
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break_38.c
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break_39.c
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break_4.c
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break_40.c
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break_41.c
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break_42.c
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break_43.c
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break_44.c
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break_45.c
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break_46.c
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break_47.c
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break_48.c
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break_49.c
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break_5.c
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break_50.c
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break_51.c
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break_52.c
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break_53.c
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break_54.c
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break_55.c
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break_56.c
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break_57.c
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break_58.c
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break_59.c
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break_6.c
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break_60.c
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break_61.c
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break_62.c
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break_63.c
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break_64.c
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break_65.c
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break_66.c
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break_67.c
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break_68.c
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break_69.c
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break_7.c
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break_70.c
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break_71.c
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break_72.c
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break_73.c
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break_74.c
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break_75.c
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break_76.c
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break_77.c
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break_78.c
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break_79.c
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break_8.c
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break_80.c
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break_81.c
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break_82.c
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break_83.c
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break_84.c
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break_85.c
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break_86.c
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break_87.c
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break_88.c
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break_89.c
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break_9.c
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break_90.c
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break_91.c
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break_92.c
 delete mode 100644 gcc/testsuite/gcc.dg/vect/vect-early-break_93.c

diff --git a/gcc/doc/sourcebuild.texi b/gcc/doc/sourcebuild.texi
index bd62b21f3b72..4be67daedb20 100644
--- a/gcc/doc/sourcebuild.texi
+++ b/gcc/doc/sourcebuild.texi
@@ -1636,14 +1636,6 @@ Target supports hardware vectors of @code{float} when
 @option{-funsafe-math-optimizations} is not in effect.
 This implies @code{vect_float}.
 
-@item vect_early_break
-Target supports vectorization codegen of loops with early breaks.
-This requires an implementation of the cbranch optab for vectors.
-
-@item vect_early_break_hw
-Target supports hardware vectorization and running of loops with early breaks.
-This requires an implementation of the cbranch optab for vectors.
-
 @item vect_int
 Target supports hardware vectors of @code{int}.
 
@@ -3213,11 +3205,6 @@ instructions, if any.
 @item tls
 Add the target-specific flags needed to use thread-local storage.
 
-@item vect_early_break
-Add the target-specific flags needed to enable early break vectorization for
-a target, if any.  This requires the target to have an implementation of the
-@code{cbranch} optab.
-
 @item weak_undefined
 Add the flags needed to enable support for weak undefined symbols.
 @end table
diff --git a/gcc/testsuite/g++.dg/vect/vect-early-break_1.cc b/gcc/testsuite/g++.dg/vect/vect-early-break_1.cc
deleted file mode 100644
index fce8e67f20b3..000000000000
--- a/gcc/testsuite/g++.dg/vect/vect-early-break_1.cc
+++ /dev/null
@@ -1,62 +0,0 @@
-/* { dg-do compile } */
-/* { dg-add-options vect_early_break } */
-/* { dg-require-effective-target vect_early_break } */
-/* { dg-require-effective-target vect_int } */
-
-
-/* { dg-additional-options "-w -O2" } */
-
-void fancy_abort(char *, int, const char *) __attribute__((__noreturn__));
-template <unsigned N, typename> struct poly_int_pod { int coeffs[N]; };
-template <unsigned N, typename> class poly_int : public poly_int_pod<N, int> {
-public:
-  template <typename Ca> poly_int &operator+=(const poly_int_pod<N, Ca> &);
-};
-template <unsigned N, typename C>
-template <typename Ca>
-poly_int<N, C> &poly_int<N, C>::operator+=(const poly_int_pod<N, Ca> &a) {
-  for (int i = 0; i < N; i++)
-    this->coeffs[i] += a.coeffs[i];
-  return *this;
-}
-template <unsigned N, typename Ca, typename Cb>
-poly_int<N, long> exact_div(poly_int_pod<N, Ca>, Cb) {
-  poly_int<N, long> r;
-  return r;
-}
-struct vec_prefix {
-  unsigned m_num;
-};
-struct vl_ptr;
-struct va_heap {
-  typedef vl_ptr default_layout;
-};
-template <typename, typename A, typename = typename A::default_layout>
-struct vec;
-template <typename T, typename A> struct vec<T, A, int> {
-  T &operator[](unsigned);
-  vec_prefix m_vecpfx;
-  T m_vecdata[];
-};
-template <typename T, typename A> T &vec<T, A, int>::operator[](unsigned ix) {
-  m_vecpfx.m_num ? fancy_abort("", 9, __FUNCTION__), 0 : 0;
-  return m_vecdata[ix];
-}
-template <typename T> struct vec<T, va_heap> {
-  T &operator[](unsigned ix) { return m_vec[ix]; }
-  vec<T, va_heap, int> m_vec;
-};
-class auto_vec : public vec<poly_int<2, long>, va_heap> {};
-template <typename> class vector_builder : public auto_vec {};
-class int_vector_builder : public vector_builder<int> {
-public:
-  int_vector_builder(poly_int<2, long>, int, int);
-};
-bool vect_grouped_store_supported() {
-  int i;
-  poly_int<2, long> nelt;
-  int_vector_builder sel(nelt, 2, 3);
-  for (i = 0; i < 6; i++)
-    sel[i] += exact_div(nelt, 2);
-}
-
diff --git a/gcc/testsuite/g++.dg/vect/vect-early-break_2.cc b/gcc/testsuite/g++.dg/vect/vect-early-break_2.cc
deleted file mode 100644
index dad175a336f7..000000000000
--- a/gcc/testsuite/g++.dg/vect/vect-early-break_2.cc
+++ /dev/null
@@ -1,61 +0,0 @@
-/* { dg-do compile } */
-/* { dg-add-options vect_early_break } */
-/* { dg-require-effective-target vect_early_break } */
-/* { dg-require-effective-target vect_int } */
-
-/* { dg-additional-options "-w -O2" } */
-
-void fancy_abort(char *, int, const char *) __attribute__((__noreturn__));
-template <unsigned N, typename> struct poly_int_pod { int coeffs[N]; };
-template <unsigned N, typename> class poly_int : public poly_int_pod<N, int> {
-public:
-  template <typename Ca> poly_int &operator+=(const poly_int_pod<N, Ca> &);
-};
-template <unsigned N, typename C>
-template <typename Ca>
-poly_int<N, C> &poly_int<N, C>::operator+=(const poly_int_pod<N, Ca> &a) {
-  for (int i = 0; i < N; i++)
-    this->coeffs[i] += a.coeffs[i];
-  return *this;
-}
-template <unsigned N, typename Ca, typename Cb>
-poly_int<N, long> exact_div(poly_int_pod<N, Ca>, Cb) {
-  poly_int<N, long> r;
-  return r;
-}
-struct vec_prefix {
-  unsigned m_num;
-};
-struct vl_ptr;
-struct va_heap {
-  typedef vl_ptr default_layout;
-};
-template <typename, typename A, typename = typename A::default_layout>
-struct vec;
-template <typename T, typename A> struct vec<T, A, int> {
-  T &operator[](unsigned);
-  vec_prefix m_vecpfx;
-  T m_vecdata[];
-};
-template <typename T, typename A> T &vec<T, A, int>::operator[](unsigned ix) {
-  m_vecpfx.m_num ? fancy_abort("", 9, __FUNCTION__), 0 : 0;
-  return m_vecdata[ix];
-}
-template <typename T> struct vec<T, va_heap> {
-  T &operator[](unsigned ix) { return m_vec[ix]; }
-  vec<T, va_heap, int> m_vec;
-};
-class auto_vec : public vec<poly_int<2, long>, va_heap> {};
-template <typename> class vector_builder : public auto_vec {};
-class int_vector_builder : public vector_builder<int> {
-public:
-  int_vector_builder(poly_int<2, long>, int, int);
-};
-bool vect_grouped_store_supported() {
-  int i;
-  poly_int<2, long> nelt;
-  int_vector_builder sel(nelt, 2, 3);
-  for (i = 0; i < 6; i++)
-    sel[i] += exact_div(nelt, 2);
-}
-
diff --git a/gcc/testsuite/g++.dg/vect/vect-early-break_3.cc b/gcc/testsuite/g++.dg/vect/vect-early-break_3.cc
deleted file mode 100644
index 8a4e33b0925b..000000000000
--- a/gcc/testsuite/g++.dg/vect/vect-early-break_3.cc
+++ /dev/null
@@ -1,17 +0,0 @@
-/* { dg-do compile } */
-/* { dg-add-options vect_early_break } */
-/* { dg-require-effective-target vect_early_break } */
-/* { dg-require-effective-target vect_int } */
-
-/* { dg-additional-options "-w -O2" } */
-
-int aarch64_advsimd_valid_immediate_hs_val32;
-bool aarch64_advsimd_valid_immediate_hs() {
-  for (int shift = 0; shift < 32; shift += 8)
-    if (aarch64_advsimd_valid_immediate_hs_val32 & shift)
-      return aarch64_advsimd_valid_immediate_hs_val32;
-  for (;;)
-    ;
-}
-
-/* { dg-final { scan-tree-dump "LOOP VECTORIZED" "vect" } } */
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break-run_1.c b/gcc/testsuite/gcc.dg/vect/vect-early-break-run_1.c
deleted file mode 100644
index fb8faea3221f..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break-run_1.c
+++ /dev/null
@@ -1,11 +0,0 @@
-/* { dg-add-options vect_early_break } */
-/* { dg-require-effective-target vect_early_break_hw } */
-/* { dg-require-effective-target vect_int } */
-
-/* { dg-additional-options "-Ofast -save-temps" } */
-
-#define N 803
-#define P 0
-#include "vect-early-break-template_1.c"
-
-/* { dg-final { scan-tree-dump "LOOP VECTORIZED" "vect" } } */
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break-run_10.c b/gcc/testsuite/gcc.dg/vect/vect-early-break-run_10.c
deleted file mode 100644
index 2fc8551db41e..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break-run_10.c
+++ /dev/null
@@ -1,11 +0,0 @@
-/* { dg-add-options vect_early_break } */
-/* { dg-require-effective-target vect_early_break_hw } */
-/* { dg-require-effective-target vect_int } */
-
-/* { dg-additional-options "-Ofast -save-temps" } */
-
-#define N 800
-#define P 799
-#include "vect-early-break-template_2.c"
-
-/* { dg-final { scan-tree-dump "LOOP VECTORIZED" "vect" } } */
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break-run_2.c b/gcc/testsuite/gcc.dg/vect/vect-early-break-run_2.c
deleted file mode 100644
index 8c6d4cebb190..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break-run_2.c
+++ /dev/null
@@ -1,11 +0,0 @@
-/* { dg-add-options vect_early_break } */
-/* { dg-require-effective-target vect_early_break_hw } */
-/* { dg-require-effective-target vect_int } */
-
-/* { dg-additional-options "-Ofast -save-temps" } */
-
-#define N 803
-#define P 802
-#include "vect-early-break-template_1.c"
-
-/* { dg-final { scan-tree-dump "LOOP VECTORIZED" "vect" } } */
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break-run_3.c b/gcc/testsuite/gcc.dg/vect/vect-early-break-run_3.c
deleted file mode 100644
index ad25db4e6e22..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break-run_3.c
+++ /dev/null
@@ -1,11 +0,0 @@
-/* { dg-add-options vect_early_break } */
-/* { dg-require-effective-target vect_early_break_hw } */
-/* { dg-require-effective-target vect_int } */
-
-/* { dg-additional-options "-Ofast -save-temps" } */
-
-#define N 803
-#define P 5
-#include "vect-early-break-template_1.c"
-
-/* { dg-final { scan-tree-dump "LOOP VECTORIZED" "vect" } } */
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break-run_4.c b/gcc/testsuite/gcc.dg/vect/vect-early-break-run_4.c
deleted file mode 100644
index 804d640cd10b..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break-run_4.c
+++ /dev/null
@@ -1,11 +0,0 @@
-/* { dg-add-options vect_early_break } */
-/* { dg-require-effective-target vect_early_break_hw } */
-/* { dg-require-effective-target vect_int } */
-
-/* { dg-additional-options "-Ofast -save-temps" } */
-
-#define N 803
-#define P 278
-#include "vect-early-break-template_1.c"
-
-/* { dg-final { scan-tree-dump "LOOP VECTORIZED" "vect" } } */
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break-run_5.c b/gcc/testsuite/gcc.dg/vect/vect-early-break-run_5.c
deleted file mode 100644
index fd8086aab0de..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break-run_5.c
+++ /dev/null
@@ -1,11 +0,0 @@
-/* { dg-add-options vect_early_break } */
-/* { dg-require-effective-target vect_early_break_hw } */
-/* { dg-require-effective-target vect_int } */
-
-/* { dg-additional-options "-Ofast -save-temps" } */
-
-#define N 800
-#define P 799
-#include "vect-early-break-template_1.c"
-
-/* { dg-final { scan-tree-dump "LOOP VECTORIZED" "vect" } } */
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break-run_6.c b/gcc/testsuite/gcc.dg/vect/vect-early-break-run_6.c
deleted file mode 100644
index 3b4490df0ebd..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break-run_6.c
+++ /dev/null
@@ -1,11 +0,0 @@
-/* { dg-add-options vect_early_break } */
-/* { dg-require-effective-target vect_early_break_hw } */
-/* { dg-require-effective-target vect_int } */
-
-/* { dg-additional-options "-Ofast -save-temps" } */
-
-#define N 803
-#define P 0
-#include "vect-early-break-template_2.c"
-
-/* { dg-final { scan-tree-dump "LOOP VECTORIZED" "vect" } } */
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break-run_7.c b/gcc/testsuite/gcc.dg/vect/vect-early-break-run_7.c
deleted file mode 100644
index ab9ff90c3d09..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break-run_7.c
+++ /dev/null
@@ -1,11 +0,0 @@
-/* { dg-add-options vect_early_break } */
-/* { dg-require-effective-target vect_early_break_hw } */
-/* { dg-require-effective-target vect_int } */
-
-/* { dg-additional-options "-Ofast -save-temps" } */
-
-#define N 803
-#define P 802
-#include "vect-early-break-template_2.c"
-
-/* { dg-final { scan-tree-dump "LOOP VECTORIZED" "vect" } } */
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break-run_8.c b/gcc/testsuite/gcc.dg/vect/vect-early-break-run_8.c
deleted file mode 100644
index c2ea839d7167..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break-run_8.c
+++ /dev/null
@@ -1,11 +0,0 @@
-/* { dg-add-options vect_early_break } */
-/* { dg-require-effective-target vect_early_break_hw } */
-/* { dg-require-effective-target vect_int } */
-
-/* { dg-additional-options "-Ofast -save-temps" } */
-
-#define N 803
-#define P 5
-#include "vect-early-break-template_2.c"
-
-/* { dg-final { scan-tree-dump "LOOP VECTORIZED" "vect" } } */
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break-run_9.c b/gcc/testsuite/gcc.dg/vect/vect-early-break-run_9.c
deleted file mode 100644
index a221c879387b..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break-run_9.c
+++ /dev/null
@@ -1,11 +0,0 @@
-/* { dg-add-options vect_early_break } */
-/* { dg-require-effective-target vect_early_break_hw } */
-/* { dg-require-effective-target vect_int } */
-
-/* { dg-additional-options "-Ofast -save-temps" } */
-
-#define N 803
-#define P 278
-#include "vect-early-break-template_2.c"
-
-/* { dg-final { scan-tree-dump "LOOP VECTORIZED" "vect" } } */
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break-template_1.c b/gcc/testsuite/gcc.dg/vect/vect-early-break-template_1.c
deleted file mode 100644
index acc088282ad0..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break-template_1.c
+++ /dev/null
@@ -1,50 +0,0 @@
-#include "tree-vect.h"
-
-#ifndef N
-#define N 803
-#endif
-
-#ifndef P
-#define P 0
-#endif
-
-unsigned vect_a[N] = {0};
-unsigned vect_b[N] = {0};
-  
-__attribute__((noipa, noinline))
-unsigned test4(unsigned x)
-{
- unsigned ret = 0;
- for (int i = 0; i < N; i++)
- {
-   vect_b[i] = x + i;
-   if (vect_a[i] > x)
-     break;
-   vect_a[i] = x;
-   
- }
- return ret;
-}
-
-extern void abort ();
-
-int main ()
-{
-  check_vect ();
-
-  int x = 1;
-  int idx = P;
-  vect_a[idx] = x + 1;
-
-  test4(x);
-
-  if (vect_b[idx] != (x + idx))
-    abort ();
-
-  if (vect_a[idx] != x + 1)
-    abort ();
-
-  if (idx > 0 && vect_a[idx-1] != x)
-    abort ();
-
-}
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break-template_2.c b/gcc/testsuite/gcc.dg/vect/vect-early-break-template_2.c
deleted file mode 100644
index dce852e760a2..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break-template_2.c
+++ /dev/null
@@ -1,53 +0,0 @@
-#include "tree-vect.h"
-
-#ifndef N
-#define N 803
-#endif
-
-#ifndef P
-#define P 0
-#endif
-
-unsigned vect_a[N] = {0};
-unsigned vect_b[N] = {0};
-  
-__attribute__((noipa, noinline))
-unsigned test4(unsigned x)
-{
- unsigned ret = 0;
- for (int i = 0; i < N; i++)
- {
-   vect_b[i] = x + i;
-   if (vect_a[i] > x)
-     return i;
-   vect_a[i] = x;
-   
- }
- return ret;
-}
-
-extern void abort ();
-
-int main ()
-{
-  check_vect ();
-
-  int x = 1;
-  int idx = P;
-  vect_a[idx] = x + 1;
-
-  unsigned res = test4(x);
-
-  if (res != idx)
-    abort ();
-
-  if (vect_b[idx] != (x + idx))
-    abort ();
-
-  if (vect_a[idx] != x + 1)
-    abort ();
-
-  if (idx > 0 && vect_a[idx-1] != x)
-    abort ();
-
-}
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break_1.c b/gcc/testsuite/gcc.dg/vect/vect-early-break_1.c
deleted file mode 100644
index c1da23e691cf..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break_1.c
+++ /dev/null
@@ -1,28 +0,0 @@
-/* { dg-add-options vect_early_break } */
-/* { dg-do compile } */
-/* { dg-require-effective-target vect_early_break } */
-/* { dg-require-effective-target vect_int } */
-
-/* { dg-additional-options "-Ofast" } */
-
-/* { dg-final { scan-tree-dump "LOOP VECTORIZED" "vect" } } */
-
-#ifndef N
-#define N 803
-#endif
-unsigned vect_a[N];
-unsigned vect_b[N];
-  
-unsigned test4(unsigned x)
-{
- unsigned ret = 0;
- for (int i = 0; i < N; i++)
- {
-   vect_b[i] = x + i;
-   if (vect_a[i] > x)
-     break;
-   vect_a[i] = x;
-   
- }
- return ret;
-}
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break_10.c b/gcc/testsuite/gcc.dg/vect/vect-early-break_10.c
deleted file mode 100644
index 49bae484967f..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break_10.c
+++ /dev/null
@@ -1,29 +0,0 @@
-/* { dg-add-options vect_early_break } */
-/* { dg-do compile } */
-/* { dg-require-effective-target vect_early_break } */
-/* { dg-require-effective-target vect_int } */
-
-/* { dg-additional-options "-Ofast" } */
-
-/* { dg-final { scan-tree-dump "LOOP VECTORIZED" "vect" } } */
-
-#ifndef N
-#define N 803
-#endif
-unsigned vect_a[N];
-unsigned vect_b[N];
-  
-unsigned test4(unsigned x,int y, int z)
-{
- unsigned ret = 0;
- for (int i = 0; i < N; i++)
- {
-   vect_b[i] = x + i;
-   if (vect_a[i] > x)
-     break;
-   vect_a[i] = x;
- }
-
- ret = x + y * z;
- return ret;
-}
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break_11.c b/gcc/testsuite/gcc.dg/vect/vect-early-break_11.c
deleted file mode 100644
index 8085383a5687..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break_11.c
+++ /dev/null
@@ -1,32 +0,0 @@
-/* { dg-add-options vect_early_break } */
-/* { dg-do compile } */
-/* { dg-require-effective-target vect_early_break } */
-/* { dg-require-effective-target vect_int } */
-
-/* { dg-additional-options "-Ofast" } */
-
-/* { dg-final { scan-tree-dump "LOOP VECTORIZED" "vect" } } */
-
-#ifndef N
-#define N 803
-#endif
-unsigned vect_a[N];
-unsigned vect_b[N];
-  
-unsigned test4(unsigned x, int y)
-{
- unsigned ret = 0;
-for (int o = 0; o < y; o++)
-{
- ret += o;
- for (int i = 0; i < N; i++)
- {
-   vect_b[i] = x + i;
-   if (vect_a[i] > x)
-     break;
-   vect_a[i] = x;
-   
- }
-}
- return ret;
-}
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break_12.c b/gcc/testsuite/gcc.dg/vect/vect-early-break_12.c
deleted file mode 100644
index 8eeec820be5c..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break_12.c
+++ /dev/null
@@ -1,32 +0,0 @@
-/* { dg-add-options vect_early_break } */
-/* { dg-do compile } */
-/* { dg-require-effective-target vect_early_break } */
-/* { dg-require-effective-target vect_int } */
-
-/* { dg-additional-options "-Ofast" } */
-
-/* { dg-final { scan-tree-dump "LOOP VECTORIZED" "vect" } } */
-
-#ifndef N
-#define N 803
-#endif
-unsigned vect_a[N];
-unsigned vect_b[N];
-  
-unsigned test4(unsigned x, int y)
-{
- unsigned ret = 0;
-for (int o = 0; o < y; o++)
-{
- ret += o;
- for (int i = 0; i < N; i++)
- {
-   vect_b[i] = x + i;
-   if (vect_a[i] > x)
-     return vect_a[i];
-   vect_a[i] = x;
-   
- }
-}
- return ret;
-}
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break_13.c b/gcc/testsuite/gcc.dg/vect/vect-early-break_13.c
deleted file mode 100644
index 58f5f0ae7e2e..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break_13.c
+++ /dev/null
@@ -1,28 +0,0 @@
-/* { dg-add-options vect_early_break } */
-/* { dg-do compile } */
-/* { dg-require-effective-target vect_early_break } */
-/* { dg-require-effective-target vect_int } */
-
-/* { dg-additional-options "-Ofast" } */
-
-/* { dg-final { scan-tree-dump "LOOP VECTORIZED" "vect" } } */
-
-#ifndef N
-#define N 803
-#endif
-unsigned vect_a[N];
-unsigned vect_b[N];
-  
-unsigned test4(unsigned x)
-{
- unsigned ret = 0;
- for (int i = 0; i < N; i++)
- {
-   vect_b[i] = x + i;
-   if (vect_a[i] > x)
-     return vect_a[i] * x;
-   vect_a[i] = x;
-   
- }
- return ret;
-}
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break_14.c b/gcc/testsuite/gcc.dg/vect/vect-early-break_14.c
deleted file mode 100644
index 3f0a61fe8b71..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break_14.c
+++ /dev/null
@@ -1,26 +0,0 @@
-/* { dg-add-options vect_early_break } */
-/* { dg-do compile } */
-/* { dg-require-effective-target vect_early_break } */
-/* { dg-require-effective-target vect_int } */
-
-/* { dg-additional-options "-Ofast" } */
-
-/* { dg-final { scan-tree-dump "LOOP VECTORIZED" "vect" } } */
-
-#define N 803
-unsigned vect_a[N];
-unsigned vect_b[N];
-  
-int test4(unsigned x)
-{
- unsigned ret = 0;
- for (int i = 0; i < N; i++)
- {
-   vect_b[i] = x + i;
-   if (vect_a[i] > x)
-     return i;
-   vect_a[i] += x * vect_b[i];
-   
- }
- return ret;
-}
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break_15.c b/gcc/testsuite/gcc.dg/vect/vect-early-break_15.c
deleted file mode 100644
index 08e7faf24023..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break_15.c
+++ /dev/null
@@ -1,26 +0,0 @@
-/* { dg-add-options vect_early_break } */
-/* { dg-do compile } */
-/* { dg-require-effective-target vect_early_break } */
-/* { dg-require-effective-target vect_int } */
-
-/* { dg-additional-options "-Ofast" } */
-
-/* { dg-final { scan-tree-dump "LOOP VECTORIZED" "vect" } } */
-
-#define N 803
-unsigned vect_a[N];
-unsigned vect_b[N];
-  
-int test4(unsigned x)
-{
- int ret = 0;
- for (int i = 0; i < N; i++)
- {
-   vect_b[i] = x + i;
-   if (vect_a[i] > x)
-     return i;
-   vect_a[i] += x * vect_b[i];
-   
- }
- return ret;
-}
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break_16.c b/gcc/testsuite/gcc.dg/vect/vect-early-break_16.c
deleted file mode 100644
index 6bb71555be20..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break_16.c
+++ /dev/null
@@ -1,26 +0,0 @@
-/* { dg-add-options vect_early_break } */
-/* { dg-do compile } */
-/* { dg-require-effective-target vect_early_break } */
-/* { dg-require-effective-target vect_int } */
-
-/* { dg-additional-options "-Ofast" } */
-
-/* { dg-final { scan-tree-dump "LOOP VECTORIZED" "vect" } } */
-
-#define N 1024
-unsigned vect_a[N];
-unsigned vect_b[N];
- 
-unsigned test4(unsigned x)
-{
- unsigned ret = 0;
- for (int i = 0; i < N; i++)
- {
-   vect_b[i] = x + i;
-   if (vect_a[i] > x)
-     return vect_a[i];
-   vect_a[i] = x;
-   ret += vect_a[i] + vect_b[i];
- }
- return ret;
-}
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break_17.c b/gcc/testsuite/gcc.dg/vect/vect-early-break_17.c
deleted file mode 100644
index 264031874eed..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break_17.c
+++ /dev/null
@@ -1,26 +0,0 @@
-/* { dg-add-options vect_early_break } */
-/* { dg-do compile } */
-/* { dg-require-effective-target vect_early_break } */
-/* { dg-require-effective-target vect_int } */
-
-/* { dg-additional-options "-Ofast" } */
-
-/* { dg-final { scan-tree-dump "LOOP VECTORIZED" "vect" } } */
-
-#define N 1024
-unsigned vect_a[N];
-unsigned vect_b[N];
- 
-unsigned test4(unsigned x)
-{
- unsigned ret = 0;
- for (int i = 0; i < N; i++)
- {
-   vect_b[i] = x + i;
-   if (vect_a[i] > x)
-     return vect_a[i];
-   vect_a[i] = x;
-   ret = vect_a[i] + vect_b[i];
- }
- return ret;
-}
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break_18.c b/gcc/testsuite/gcc.dg/vect/vect-early-break_18.c
deleted file mode 100644
index babc79c74c39..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break_18.c
+++ /dev/null
@@ -1,28 +0,0 @@
-/* { dg-add-options vect_early_break } */
-/* { dg-do compile } */
-/* { dg-require-effective-target vect_early_break } */
-/* { dg-require-effective-target vect_int } */
-
-/* { dg-additional-options "-Ofast" } */
-
-/* { dg-final { scan-tree-dump "LOOP VECTORIZED" "vect" } } */
-
-#ifndef N
-#define N 803
-#endif
-unsigned vect_a[N];
-unsigned vect_b[N];
-  
-unsigned test4(unsigned x)
-{
- unsigned ret = 0;
- for (int i = 0; i < N; i+=2)
- {
-   vect_b[i] = x + i;
-   if (vect_a[i] > x)
-     break;
-   vect_a[i] = x;
-   
- }
- return ret;
-}
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break_19.c b/gcc/testsuite/gcc.dg/vect/vect-early-break_19.c
deleted file mode 100644
index 9555c16a0821..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break_19.c
+++ /dev/null
@@ -1,28 +0,0 @@
-/* { dg-add-options vect_early_break } */
-/* { dg-do compile } */
-/* { dg-require-effective-target vect_early_break } */
-/* { dg-require-effective-target vect_int } */
-
-/* { dg-additional-options "-Ofast" } */
-
-/* { dg-final { scan-tree-dump "LOOP VECTORIZED" "vect" } } */
-
-#ifndef N
-#define N 803
-#endif
-unsigned vect_a[N];
-unsigned vect_b[N];
-  
-unsigned test4(unsigned x, unsigned step)
-{
- unsigned ret = 0;
- for (int i = 0; i < N; i+=step)
- {
-   vect_b[i] = x + i;
-   if (vect_a[i] > x)
-     break;
-   vect_a[i] = x;
-   
- }
- return ret;
-}
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break_2.c b/gcc/testsuite/gcc.dg/vect/vect-early-break_2.c
deleted file mode 100644
index 5c32bf94409e..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break_2.c
+++ /dev/null
@@ -1,28 +0,0 @@
-/* { dg-add-options vect_early_break } */
-/* { dg-do compile } */
-/* { dg-require-effective-target vect_early_break } */
-/* { dg-require-effective-target vect_int } */
-
-/* { dg-additional-options "-Ofast" } */
-
-/* { dg-final { scan-tree-dump "LOOP VECTORIZED" "vect" } } */
-
-#include <complex.h>
-
-#define N 1024
-complex double vect_a[N];
-complex double vect_b[N];
-  
-complex double test4(complex double x)
-{
- complex double ret = 0;
- for (int i = 0; i < N; i++)
- {
-   vect_b[i] += x + i;
-   if (vect_a[i] == x)
-     return i;
-   vect_a[i] += x * vect_b[i];
-   
- }
- return ret;
-}
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break_20.c b/gcc/testsuite/gcc.dg/vect/vect-early-break_20.c
deleted file mode 100644
index 039aac7fd84c..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break_20.c
+++ /dev/null
@@ -1,38 +0,0 @@
-/* { dg-add-options vect_early_break } */
-/* { dg-do compile } */
-/* { dg-require-effective-target vect_early_break } */
-/* { dg-require-effective-target vect_int } */
-
-/* { dg-additional-options "-Ofast" } */
-
-/* { dg-final { scan-tree-dump "LOOP VECTORIZED" "vect" } } */
-
-#include <stdbool.h>
-
-#ifndef N
-#define N 803
-#endif
-unsigned vect_b[N];
-struct testStruct {
- long e;
- long f;
- bool a : 1;
- bool b : 1;
- int c : 14;
- int d;
-};
-struct testStruct vect_a[N];
-  
-unsigned test4(unsigned x)
-{
- unsigned ret = 0;
- for (int i = 0; i < N; i++)
- {
-   vect_b[i] = x + i;
-   if (vect_a[i].a > x)
-     return true;
-   vect_a[i].e = x;
- }
- return ret;
-}
-
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break_21.c b/gcc/testsuite/gcc.dg/vect/vect-early-break_21.c
deleted file mode 100644
index dbe3f8265115..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break_21.c
+++ /dev/null
@@ -1,38 +0,0 @@
-/* { dg-add-options vect_early_break } */
-/* { dg-do compile } */
-/* { dg-require-effective-target vect_early_break } */
-/* { dg-require-effective-target vect_int } */
-
-/* { dg-additional-options "-Ofast" } */
-
-/* { dg-final { scan-tree-dump "LOOP VECTORIZED" "vect" { target { ! "x86_64-*-* i?86-*-*" } } } } */
-
-#include <stdbool.h>
-
-#ifndef N
-#define N 803
-#endif
-unsigned vect_b[N];
-struct testStruct {
- long e;
- long f;
- bool a : 1;
- bool b : 1;
- int c : 14;
- int d;
-};
-struct testStruct vect_a[N];
-  
-unsigned test4(unsigned x)
-{
- unsigned ret = 0;
- for (int i = 0; i < N; i++)
- {
-   vect_b[i] = x + i;
-   if (vect_a[i].a)
-     return true;
-   vect_a[i].e = x;
- }
- return ret;
-}
-
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break_22.c b/gcc/testsuite/gcc.dg/vect/vect-early-break_22.c
deleted file mode 100644
index b3f5984f682f..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break_22.c
+++ /dev/null
@@ -1,45 +0,0 @@
-/* { dg-add-options vect_early_break } */
-/* { dg-require-effective-target vect_int } */
-/* { dg-require-effective-target vect_perm } */
-/* { dg-require-effective-target vect_early_break_hw } */
-
-#include "tree-vect.h"
-
-void __attribute__((noipa))
-foo (int * __restrict__ a, short * __restrict__ b, int * __restrict__ c)
-{
-  int t1 = *c;
-  int t2 = *c;
-  for (int i = 0; i < 64; i+=2)
-    {
-      b[i] = a[i] - t1;
-      t1 = a[i];
-      b[i+1] = a[i+1] - t2;
-      t2 = a[i+1];
-    }
-}
-
-int a[64];
-short b[64];
-
-int
-main ()
-{
-  check_vect ();
-  for (int i = 0; i < 64; ++i)
-    {
-      a[i] = i;
-      __asm__ volatile ("" ::: "memory");
-    }
-  int c = 7;
-  foo (a, b, &c);
-  for (int i = 2; i < 64; i+=2)
-    if (b[i] != a[i] - a[i-2]
-	|| b[i+1] != a[i+1] - a[i-1])
-      abort ();
-  if (b[0] != -7 || b[1] != -6)
-    abort ();
-  return 0;
-}
-
-/* { dg-final { scan-tree-dump-times "vectorized 1 loops in function" 2 "vect" } } */
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break_23.c b/gcc/testsuite/gcc.dg/vect/vect-early-break_23.c
deleted file mode 100644
index 3e435af44471..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break_23.c
+++ /dev/null
@@ -1,65 +0,0 @@
-/* { dg-add-options vect_early_break } */
-/* { dg-require-effective-target vect_early_break_hw } */
-/* { dg-require-effective-target vect_int } */
-
-#include "tree-vect.h"
-
-#define N 200
-#define M 4
-
-typedef signed char sc;
-typedef unsigned char uc;
-typedef signed short ss;
-typedef unsigned short us;
-typedef int si;
-typedef unsigned int ui;
-typedef signed long long sll;
-typedef unsigned long long ull;
-
-#define FOR_EACH_TYPE(M) \
-  M (sc) M (uc) \
-  M (ss) M (us) \
-  M (si) M (ui) \
-  M (sll) M (ull) \
-  M (float) M (double)
-
-#define TEST_VALUE(I) ((I) * 17 / 2)
-
-#define ADD_TEST(TYPE)				\
-  void __attribute__((noinline, noclone))	\
-  test_##TYPE (TYPE *a, TYPE *b)		\
-  {						\
-    for (int i = 0; i < N; i += 2)		\
-      {						\
-	a[i + 0] = b[i + 0] + 2;		\
-	a[i + 1] = b[i + 1] + 3;		\
-      }						\
-  }
-
-#define DO_TEST(TYPE)					\
-  for (int j = 1; j < M; ++j)				\
-    {							\
-      TYPE a[N + M];					\
-      for (int i = 0; i < N + M; ++i)			\
-	a[i] = TEST_VALUE (i);				\
-      test_##TYPE (a + j, a);				\
-      for (int i = 0; i < N; i += 2)			\
-	if (a[i + j] != (TYPE) (a[i] + 2)		\
-	    || a[i + j + 1] != (TYPE) (a[i + 1] + 3))	\
-	  __builtin_abort ();				\
-    }
-
-FOR_EACH_TYPE (ADD_TEST)
-
-int
-main (void)
-{
-  check_vect ();
-
-  FOR_EACH_TYPE (DO_TEST)
-  return 0;
-}
-
-/* { dg-final { scan-tree-dump {flags: [^\n]*ARBITRARY\n} "vect" { target vect_int } } } */
-/* { dg-final { scan-tree-dump "using an address-based overlap test" "vect" } } */
-/* { dg-final { scan-tree-dump-not "using an index-based" "vect" } } */
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break_24.c b/gcc/testsuite/gcc.dg/vect/vect-early-break_24.c
deleted file mode 100644
index fa2a17ed96f1..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break_24.c
+++ /dev/null
@@ -1,46 +0,0 @@
-/* { dg-add-options vect_early_break } */
-/* { dg-require-effective-target vect_double } */
-/* { dg-require-effective-target vect_early_break_hw } */
-
-#include "tree-vect.h"
-
-extern void abort (void);
-void __attribute__((noinline,noclone))
-foo (double *b, double *d, double *f)
-{
-  int i;
-  for (i = 0; i < 1024; i++)
-    {
-      d[2*i] = 2. * d[2*i];
-      d[2*i+1] = 4. * d[2*i+1];
-      b[i] = d[2*i] - 1.;
-      f[i] = d[2*i+1] + 2.;
-    }
-}
-int main()
-{
-  double b[1024], d[2*1024], f[1024];
-  int i;
-
-  check_vect ();
-
-  for (i = 0; i < 2*1024; i++)
-    d[i] = 1.;
-  foo (b, d, f);
-  for (i = 0; i < 1024; i+= 2)
-    {
-      if (d[2*i] != 2.)
-	abort ();
-      if (d[2*i+1] != 4.)
-	abort ();
-    }
-  for (i = 0; i < 1024; i++)
-    {
-      if (b[i] != 1.)
-	abort ();
-      if (f[i] != 6.)
-	abort ();
-    }
-  return 0;
-}
-
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break_25.c b/gcc/testsuite/gcc.dg/vect/vect-early-break_25.c
deleted file mode 100644
index 4d8b47ed9aaa..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break_25.c
+++ /dev/null
@@ -1,11 +0,0 @@
-/* { dg-add-options vect_early_break } */
-/* { dg-do compile } */
-/* { dg-require-effective-target vect_early_break } */
-/* Disabling epilogues until we find a better way to deal with scans.  */
-/* { dg-additional-options "--param vect-epilogues-nomask=0" } */
-/* { dg-require-effective-target vect_int } */
-
-#include "vect-peel-1-src.c"
-
-/* { dg-final { scan-tree-dump-times "vectorized 1 loops" 1 "vect" } } */
-/* { dg-final { scan-tree-dump-times "Alignment of access forced using peeling" 1 "vect" { xfail vect_element_align_preferred } } } */
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break_26.c b/gcc/testsuite/gcc.dg/vect/vect-early-break_26.c
deleted file mode 100644
index 47d2a50218bd..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break_26.c
+++ /dev/null
@@ -1,44 +0,0 @@
-/* { dg-add-options vect_early_break } */
-/* { dg-require-effective-target vect_early_break_hw } */
-/* { dg-require-effective-target vect_int } */
-/* { dg-require-effective-target vect_perm } */
-
-#include "tree-vect.h"
-
-void __attribute__((noipa))
-foo (int * __restrict__ a, int * __restrict__ b, int * __restrict__ c)
-{
-  int t1 = *c;
-  int t2 = *c;
-  for (int i = 0; i < 64; i+=2)
-    {
-      b[i] = a[i] - t1;
-      t1 = a[i];
-      b[i+1] = a[i+1] - t2;
-      t2 = a[i+1];
-    }
-}
-
-int a[64], b[64];
-
-int
-main ()
-{
-  check_vect ();
-  for (int i = 0; i < 64; ++i)
-    {
-      a[i] = i;
-      __asm__ volatile ("" ::: "memory");
-    }
-  int c = 7;
-  foo (a, b, &c);
-  for (int i = 2; i < 64; i+=2)
-    if (b[i] != a[i] - a[i-2]
-	|| b[i+1] != a[i+1] - a[i-1])
-      abort ();
-  if (b[0] != -7 || b[1] != -6)
-    abort ();
-  return 0;
-}
-
-/* { dg-final { scan-tree-dump-times "vectorized 1 loops in function" 2 "vect" } } */
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break_27.c b/gcc/testsuite/gcc.dg/vect/vect-early-break_27.c
deleted file mode 100644
index ed7b31757a0c..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break_27.c
+++ /dev/null
@@ -1,19 +0,0 @@
-/* { dg-add-options vect_early_break } */
-/* { dg-do compile } */
-/* { dg-require-effective-target vect_early_break } */
-/* { dg-require-effective-target vect_int } */
-
-void abort ();
-int a[128];
-
-int main ()
-{
-  int i;
-  for (i = 1; i < 128; i++)
-    if (a[i] != i%4 + 1)
-      abort ();
-  if (a[0] != 5)
-    abort ();
-}
-
-/* { dg-final { scan-tree-dump "vectorized 1 loops in function" "vect" } } */
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break_28.c b/gcc/testsuite/gcc.dg/vect/vect-early-break_28.c
deleted file mode 100644
index 9c980b8453d9..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break_28.c
+++ /dev/null
@@ -1,16 +0,0 @@
-/* { dg-add-options vect_early_break } */
-/* { dg-do compile } */
-/* { dg-require-effective-target vect_early_break } */
-/* { dg-require-effective-target vect_int } */
-
-void abort ();
-int a[128];
-int main ()
-{
-  int i;
-  for (i = 1; i < 128; i++)
-    if (a[i] != i%4 + 1)
-    abort ();
-}
-
-/* { dg-final { scan-tree-dump "vectorized 1 loops in function" "vect" } } */
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break_29.c b/gcc/testsuite/gcc.dg/vect/vect-early-break_29.c
deleted file mode 100644
index b66fe204caee..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break_29.c
+++ /dev/null
@@ -1,17 +0,0 @@
-/* { dg-add-options vect_early_break } */
-/* { dg-do compile } */
-/* { dg-require-effective-target vect_early_break } */
-/* { dg-require-effective-target vect_int } */
-
-int in[100];
-int out[100 * 2];
-
-int main (void)
-{
-  if (out[0] != in[100 - 1])
-  for (int i = 1; i <= 100; ++i)
-    if (out[i] != 2)
-      __builtin_abort ();
-}
-
-/* { dg-final { scan-tree-dump "vectorized 1 loops in function" "vect" } } */
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break_3.c b/gcc/testsuite/gcc.dg/vect/vect-early-break_3.c
deleted file mode 100644
index 4afbc7266765..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break_3.c
+++ /dev/null
@@ -1,21 +0,0 @@
-/* { dg-add-options vect_early_break } */
-/* { dg-do compile } */
-/* { dg-require-effective-target vect_early_break } */
-/* { dg-require-effective-target vect_int } */
-
-/* { dg-additional-options "-Ofast" } */
-
-/* { dg-final { scan-tree-dump-not "LOOP VECTORIZED" "vect" } } */
-
-unsigned test4(char x, char *vect, int n)
-{  
- unsigned ret = 0;
- for (int i = 0; i < n; i++)
- {
-   if (vect[i] > x)
-     return 1;
-
-   vect[i] = x;
- }
- return ret;
-}
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break_30.c b/gcc/testsuite/gcc.dg/vect/vect-early-break_30.c
deleted file mode 100644
index 3f6e802ae8f0..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break_30.c
+++ /dev/null
@@ -1,29 +0,0 @@
-/* { dg-add-options vect_early_break } */
-/* { dg-do compile } */
-/* { dg-require-effective-target vect_early_break } */
-/* { dg-require-effective-target vect_int } */
-
-int x[100];
-int choose1(int);
-int choose2();
-void consume(int);
-void f() {
-    for (int i = 0; i < 100; ++i) {
-        if (x[i] == 11) {
-            if (choose1(i))
-                goto A;
-            else
-                goto B;
-        }
-    }
-    if (choose2())
-        goto B;
-A:
-    for (int i = 0; i < 100; ++i)
-        consume(i);
-B:
-    for (int i = 0; i < 100; ++i)
-        consume(i * i);
-}
-
-/* { dg-final { scan-tree-dump "vectorized 1 loops in function" "vect" } } */
\ No newline at end of file
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break_31.c b/gcc/testsuite/gcc.dg/vect/vect-early-break_31.c
deleted file mode 100644
index 1eaf52aaa852..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break_31.c
+++ /dev/null
@@ -1,30 +0,0 @@
-/* { dg-add-options vect_early_break } */
-/* { dg-do compile } */
-/* { dg-require-effective-target vect_early_break } */
-/* { dg-require-effective-target vect_int } */
-
-/* { dg-additional-options "-Ofast" } */
-
-/* { dg-final { scan-tree-dump "LOOP VECTORIZED" "vect" } } */
-
-#ifndef N
-#define N 1025
-#endif
-unsigned vect_a[N];
-unsigned vect_b[N];
- 
-unsigned test4(unsigned x)
-{
- unsigned ret = 0;
- for (int i = 0; i < N; i++)
- {
-   vect_b[i] = x + i;
-   if (vect_a[i] > x)
-     return vect_a[i];
-   vect_a[i] = x;
-   ret += vect_a[i] + vect_b[i];
- }
- return ret;
-}
-
-/* { dg-final { scan-tree-dump "vectorized 1 loops in function" "vect" } } */
\ No newline at end of file
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break_32.c b/gcc/testsuite/gcc.dg/vect/vect-early-break_32.c
deleted file mode 100644
index 038be402c2b8..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break_32.c
+++ /dev/null
@@ -1,30 +0,0 @@
-/* { dg-add-options vect_early_break } */
-/* { dg-do compile } */
-/* { dg-require-effective-target vect_early_break } */
-/* { dg-require-effective-target vect_int } */
-
-/* { dg-additional-options "-Ofast" } */
-
-/* { dg-final { scan-tree-dump "LOOP VECTORIZED" "vect" } } */
-
-#ifndef N
-#define N 1024
-#endif
-unsigned vect_a[N];
-unsigned vect_b[N];
- 
-unsigned test4(unsigned x)
-{
- unsigned ret = 0;
- for (int i = 0; i < N; i++)
- {
-   vect_b[i] = x + i;
-   if (vect_a[i] > x)
-     return vect_a[i];
-   vect_a[i] = x;
-   ret = vect_a[i] + vect_b[i];
- }
- return ret;
-}
-
-/* { dg-final { scan-tree-dump "vectorized 1 loops in function" "vect" } } */
\ No newline at end of file
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break_33.c b/gcc/testsuite/gcc.dg/vect/vect-early-break_33.c
deleted file mode 100644
index 74116143b260..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break_33.c
+++ /dev/null
@@ -1,29 +0,0 @@
-/* { dg-add-options vect_early_break } */
-/* { dg-do compile } */
-/* { dg-require-effective-target vect_early_break } */
-/* { dg-require-effective-target vect_int } */
-
-#ifndef N
-#define N 803
-#endif
-unsigned vect_a2[N];
-unsigned vect_a1[N];
-unsigned vect_b[N];
-
-unsigned test4(unsigned x, int z)
-{
- unsigned ret = 0;
- for (int i = 0; i < N; i++)
- {
-   vect_b[i] = x + i;
-   if (vect_a1[i]*2 > x)
-     {
-       for (int y = 0; y < z; y++)
-	 vect_a2 [y] *= vect_a1[i];
-       break;
-     }
- }
- return ret;
-}
-
-/* { dg-final { scan-tree-dump "vectorized 2 loops in function" "vect" } } */
\ No newline at end of file
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break_34.c b/gcc/testsuite/gcc.dg/vect/vect-early-break_34.c
deleted file mode 100644
index 63f1bb4254c6..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break_34.c
+++ /dev/null
@@ -1,28 +0,0 @@
-/* { dg-add-options vect_early_break } */
-/* { dg-do compile } */
-/* { dg-require-effective-target vect_early_break } */
-/* { dg-require-effective-target vect_int } */
-
-#ifndef N
-#define N 803
-#endif
-
-unsigned vect_a[N] __attribute__ ((aligned (4)));;
-unsigned vect_b[N];
-  
-unsigned test4(unsigned x)
-{
- unsigned ret = 0;
- 
- for (int i = 1; i < N; i++)
- {
-   vect_b[i] = x + i;
-   if (vect_a[i]*2 > x)
-     break;
-   vect_a[i] = x;
-   
- }
- return ret;
-}
-
-/* { dg-final { scan-tree-dump "vectorized 1 loops in function" "vect" } } */
\ No newline at end of file
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break_35.c b/gcc/testsuite/gcc.dg/vect/vect-early-break_35.c
deleted file mode 100644
index 4c0078fbc675..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break_35.c
+++ /dev/null
@@ -1,29 +0,0 @@
-/* { dg-add-options vect_early_break } */
-/* { dg-do compile } */
-/* { dg-require-effective-target vect_early_break } */
-/* { dg-require-effective-target vect_int } */
-
-#ifndef N
-#define N 803
-#endif
-unsigned vect_a2[N];
-unsigned vect_a1[N];
-unsigned vect_b[N];
-  
-unsigned test4(unsigned x)
-{
- unsigned ret = 0;
- for (int i = 0; i < N; i++)
- {
-   vect_b[i] = x + i;
-   if (vect_a1[i]*2 > x)
-     break;
-   vect_a1[i] = x;
-   if (vect_a2[i]*4 > x)
-     break;
-   vect_a2[i] = x*x;
- }
- return ret;
-}
-
-/* { dg-final { scan-tree-dump "vectorized 1 loops in function" "vect" } } */
\ No newline at end of file
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break_36.c b/gcc/testsuite/gcc.dg/vect/vect-early-break_36.c
deleted file mode 100644
index a83994035b9d..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break_36.c
+++ /dev/null
@@ -1,29 +0,0 @@
-/* { dg-add-options vect_early_break } */
-/* { dg-do compile } */
-/* { dg-require-effective-target vect_early_break } */
-/* { dg-require-effective-target vect_int } */
-
-#ifndef N
-#define N 803
-#endif
-unsigned vect_a2[N];
-unsigned vect_a1[N];
-unsigned vect_b[N];
-
-unsigned test4(unsigned x)
-{
- unsigned ret = 0;
- for (int i = 0; i < N; i++)
- {
-   vect_b[i] = x + i;
-   if (vect_a1[i]*2 > x)
-     break;
-   vect_a1[i] = x;
-   if (vect_a2[i]*4 > x)
-     return i;
-   vect_a2[i] = x*x;
- }
- return ret;
-}
-
-/* { dg-final { scan-tree-dump "vectorized 1 loops in function" "vect" } } */
\ No newline at end of file
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break_37.c b/gcc/testsuite/gcc.dg/vect/vect-early-break_37.c
deleted file mode 100644
index b7559a9adc7c..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break_37.c
+++ /dev/null
@@ -1,26 +0,0 @@
-/* { dg-add-options vect_early_break } */
-/* { dg-do compile } */
-/* { dg-require-effective-target vect_early_break } */
-/* { dg-require-effective-target vect_int } */
-
-#ifndef N
-#define N 4
-#endif
-unsigned vect_a[N];
-unsigned vect_b[N];
-  
-unsigned test4(unsigned x)
-{
- unsigned ret = 0;
- for (int i = 0; i < N; i++)
- {
-   vect_b[i] = x + i;
-   if (vect_a[i]*2 != x)
-     break;
-   vect_a[i] = x;
-   
- }
- return ret;
-}
-
-/* { dg-final { scan-tree-dump "vectorized 1 loops in function" "vect" } } */
\ No newline at end of file
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break_38.c b/gcc/testsuite/gcc.dg/vect/vect-early-break_38.c
deleted file mode 100644
index 8062fbbf6422..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break_38.c
+++ /dev/null
@@ -1,26 +0,0 @@
-/* { dg-add-options vect_early_break } */
-/* { dg-do compile } */
-/* { dg-require-effective-target vect_early_break } */
-/* { dg-require-effective-target vect_int } */
-
-#ifndef N
-#define N 803
-#endif
-unsigned vect_a[N];
-unsigned vect_b[N];
-  
-unsigned test4(unsigned x)
-{
- unsigned ret = 0;
- for (int i = 0; i < N; i+=2)
- {
-   vect_b[i] = x + i;
-   if (vect_a[i]*2 > x)
-     break;
-   vect_a[i] = x;
-   
- }
- return ret;
-}
-
-/* { dg-final { scan-tree-dump "vectorized 1 loops in function" "vect" } } */
\ No newline at end of file
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break_39.c b/gcc/testsuite/gcc.dg/vect/vect-early-break_39.c
deleted file mode 100644
index 9d3c6a5dffe3..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break_39.c
+++ /dev/null
@@ -1,26 +0,0 @@
-/* { dg-add-options vect_early_break } */
-/* { dg-do compile } */
-/* { dg-require-effective-target vect_early_break } */
-/* { dg-require-effective-target vect_int } */
-
-#ifndef N
-#define N 803
-#endif
-unsigned vect_a[N];
-unsigned vect_b[N];
-  
-unsigned test4(unsigned x, unsigned n)
-{
- unsigned ret = 0;
- for (int i = 0; i < N; i+= (N % 4))
- {
-   vect_b[i] = x + i;
-   if (vect_a[i]*2 > x)
-     break;
-   vect_a[i] = x;
-   
- }
- return ret;
-}
-
-/* { dg-final { scan-tree-dump "vectorized 1 loops in function" "vect" } } */
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break_4.c b/gcc/testsuite/gcc.dg/vect/vect-early-break_4.c
deleted file mode 100644
index bd7107c1736c..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break_4.c
+++ /dev/null
@@ -1,24 +0,0 @@
-/* { dg-add-options vect_early_break } */
-/* { dg-do compile } */
-/* { dg-require-effective-target vect_early_break } */
-/* { dg-require-effective-target vect_int } */
-
-/* { dg-additional-options "-Ofast" } */
-
-/* { dg-final { scan-tree-dump-not "LOOP VECTORIZED" "vect" } } */
-
-#define N 1024
-unsigned vect[N];
-
-unsigned test4(unsigned x)
-{
- unsigned ret = 0;
- for (int i = 0; i < N; i++)
- {
-   if (i > 16 && vect[i] > x)
-     break;
-
-   vect[i] = x;
- }
- return ret;
-}
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break_40.c b/gcc/testsuite/gcc.dg/vect/vect-early-break_40.c
deleted file mode 100644
index 428f6249fa68..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break_40.c
+++ /dev/null
@@ -1,27 +0,0 @@
-/* { dg-add-options vect_early_break } */
-/* { dg-do compile } */
-/* { dg-require-effective-target vect_early_break } */
-/* { dg-require-effective-target vect_int } */
-
-#ifndef N
-#define N 803
-#endif
-unsigned vect_a[N];
-unsigned vect_b[N];
-  
-unsigned test4(unsigned x)
-{
- unsigned ret = 0;
- for (int i = 0; i < N; i*=3)
- {
-   vect_b[i] = x + i;
-   if (vect_a[i]*2 > x)
-     break;
-   vect_a[i] = x;
-   
- }
- return ret;
-}
-
-/* SCEV can't currently analyze this loop bounds.  */
-/* { dg-final { scan-tree-dump "vectorized 1 loops in function" "vect" { xfail *-*-* } } } */
\ No newline at end of file
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break_41.c b/gcc/testsuite/gcc.dg/vect/vect-early-break_41.c
deleted file mode 100644
index 31a8ed2d3e2f..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break_41.c
+++ /dev/null
@@ -1,25 +0,0 @@
-/* { dg-add-options vect_early_break } */
-/* { dg-do compile } */
-/* { dg-require-effective-target vect_early_break } */
-/* { dg-require-effective-target vect_int } */
-
-#ifndef N
-#define N 803
-#endif
-unsigned vect_a[N];
-unsigned vect_b[N];
-  
-unsigned test4(unsigned x)
-{
- unsigned ret = 0;
-#pragma GCC novector
-#pragma GCC unroll 4
- for (int i = 0; i < N; i++)
- {
-   vect_b[i] += vect_a[i] + x;
- }
- return ret;
-}
-
-/* novector should have blocked vectorization.  */
-/* { dg-final { scan-tree-dump-not "vectorized \d loops in function" "vect" } } */
\ No newline at end of file
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break_42.c b/gcc/testsuite/gcc.dg/vect/vect-early-break_42.c
deleted file mode 100644
index f1ee2f7e9a66..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break_42.c
+++ /dev/null
@@ -1,26 +0,0 @@
-/* { dg-add-options vect_early_break } */
-/* { dg-do compile } */
-/* { dg-require-effective-target vect_early_break } */
-/* { dg-require-effective-target vect_int } */
-
-#ifndef N
-#define N 800
-#endif
-unsigned vect_a[N];
-unsigned vect_b[N];
-  
-unsigned test4(unsigned x)
-{
- unsigned ret = 0;
- for (int i = 0; i < N; i++)
- {
-   vect_b[i] = x + i;
-   if (vect_a[i]*2 > x)
-     break;
-   vect_a[i] = x;
-   
- }
- return ret;
-}
-
-/* { dg-final { scan-tree-dump "vectorized 1 loops in function" "vect" } } */
\ No newline at end of file
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break_43.c b/gcc/testsuite/gcc.dg/vect/vect-early-break_43.c
deleted file mode 100644
index 7e9f635a0b5a..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break_43.c
+++ /dev/null
@@ -1,30 +0,0 @@
-/* { dg-add-options vect_early_break } */
-/* { dg-do compile } */
-/* { dg-require-effective-target vect_early_break } */
-/* { dg-require-effective-target vect_int } */
-
-#ifndef N
-#define N 802
-#endif
-unsigned vect_a[N];
-unsigned vect_b[N];
-  
-unsigned test4(unsigned x)
-{
- unsigned ret = 0;
- for (int i = 0; i < N; i+=2)
- {
-   vect_b[i] = x + i;
-   vect_b[i+1] = x + i + 1;
-   if (vect_a[i]*2 > x)
-     break;
-   if (vect_a[i+1]*2 > x)
-     break;
-   vect_a[i] = x;
-   vect_a[i+1] = x;
-   
- }
- return ret;
-}
-
-/* { dg-final { scan-tree-dump "vectorized 1 loops in function" "vect" } } */
\ No newline at end of file
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break_44.c b/gcc/testsuite/gcc.dg/vect/vect-early-break_44.c
deleted file mode 100644
index 7e9f635a0b5a..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break_44.c
+++ /dev/null
@@ -1,30 +0,0 @@
-/* { dg-add-options vect_early_break } */
-/* { dg-do compile } */
-/* { dg-require-effective-target vect_early_break } */
-/* { dg-require-effective-target vect_int } */
-
-#ifndef N
-#define N 802
-#endif
-unsigned vect_a[N];
-unsigned vect_b[N];
-  
-unsigned test4(unsigned x)
-{
- unsigned ret = 0;
- for (int i = 0; i < N; i+=2)
- {
-   vect_b[i] = x + i;
-   vect_b[i+1] = x + i + 1;
-   if (vect_a[i]*2 > x)
-     break;
-   if (vect_a[i+1]*2 > x)
-     break;
-   vect_a[i] = x;
-   vect_a[i+1] = x;
-   
- }
- return ret;
-}
-
-/* { dg-final { scan-tree-dump "vectorized 1 loops in function" "vect" } } */
\ No newline at end of file
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break_45.c b/gcc/testsuite/gcc.dg/vect/vect-early-break_45.c
deleted file mode 100644
index 7031f237ecce..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break_45.c
+++ /dev/null
@@ -1,26 +0,0 @@
-/* { dg-add-options vect_early_break } */
-/* { dg-do compile } */
-/* { dg-require-effective-target vect_early_break } */
-/* { dg-require-effective-target vect_int } */
-
-#ifndef N
-#define N 803
-#endif
-unsigned vect_a[N];
-unsigned vect_b[N];
-  
-unsigned test4(unsigned x)
-{
- unsigned ret = 0;
- for (int i = 0; i < N; i++)
- {
-   vect_b[i] = x + i;
-   if (vect_a[i]*2 > x)
-     break;
-   vect_a[i] = x;
-   
- }
- return ret;
-}
-
-/* { dg-final { scan-tree-dump "vectorized 1 loops in function" "vect" } } */
\ No newline at end of file
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break_46.c b/gcc/testsuite/gcc.dg/vect/vect-early-break_46.c
deleted file mode 100644
index c9aad909ffd8..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break_46.c
+++ /dev/null
@@ -1,28 +0,0 @@
-/* { dg-add-options vect_early_break } */
-/* { dg-do compile } */
-/* { dg-require-effective-target vect_early_break } */
-/* { dg-require-effective-target vect_float } */
-
-#include <complex.h>
-
-#define N 1024
-complex double vect_a[N];
-complex double vect_b[N];
-  
-complex double test4(complex double x)
-{
- complex double ret = 0;
- for (int i = 0; i < N; i++)
- {
-   vect_b[i] += x + i;
-   if (vect_a[i] == x)
-     return i;
-   vect_a[i] += x * vect_b[i];
-   
- }
- return ret;
-}
-
-/* At -O2 we can't currently vectorize this because of the libcalls not being
-   lowered.  */
-/* { dg-final { scan-tree-dump "vectorized 1 loops in function" "vect"  { xfail *-*-* } } } */
\ No newline at end of file
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break_47.c b/gcc/testsuite/gcc.dg/vect/vect-early-break_47.c
deleted file mode 100644
index ef90380ea197..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break_47.c
+++ /dev/null
@@ -1,26 +0,0 @@
-/* { dg-add-options vect_early_break } */
-/* { dg-do compile } */
-/* { dg-require-effective-target vect_early_break } */
-/* { dg-require-effective-target vect_float } */
-
-void abort ();
-
-float results1[16] = {192.00,240.00,288.00,336.00,384.00,432.00,480.00,528.00,0.00};
-float results2[16] = {0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,54.00,120.00,198.00,288.00,390.00,504.00,630.00};
-float a[16] = {0};
-float e[16] = {0};
-float b[16] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};
-int main1 ()
-{
-  int i;
-  for (i=0; i<16; i++)
-    {
-      if (a[i] != results1[i] || e[i] != results2[i])
-        abort();
-    }
-
-  if (a[i+3] != b[i-1])
-    abort ();
-}
-
-/* { dg-final { scan-tree-dump "vectorized 1 loops in function" "vect" } } */
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break_48.c b/gcc/testsuite/gcc.dg/vect/vect-early-break_48.c
deleted file mode 100644
index 0efbb2836bfd..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break_48.c
+++ /dev/null
@@ -1,14 +0,0 @@
-/* { dg-add-options vect_early_break } */
-/* { dg-do compile } */
-/* { dg-require-effective-target vect_early_break } */
-/* { dg-require-effective-target vect_int } */
-
-int main (void)
-{
-  signed char a[50], b[50], c[50];
-  for (int i = 0; i < 50; ++i)
-    if (a[i] != ((((signed int) -1 < 0 ? -126 : 4) + ((signed int) -1 < 0 ? -101 : 26) + i * 9 + 0) >> 1))
-      __builtin_abort ();
-}
-
-/* { dg-final { scan-tree-dump "vectorized 1 loops in function" "vect" } } */
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break_49.c b/gcc/testsuite/gcc.dg/vect/vect-early-break_49.c
deleted file mode 100644
index 6c4ee40fd5d3..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break_49.c
+++ /dev/null
@@ -1,25 +0,0 @@
-/* { dg-add-options vect_early_break } */
-/* { dg-do compile } */
-/* { dg-require-effective-target vect_early_break } */
-/* { dg-require-effective-target vect_int } */
-
-void abort();
-struct foostr {
-  _Complex short f1;
-  _Complex short f2;
-};
-struct foostr a[16] __attribute__ ((__aligned__(16))) = {};
-struct foostr c[16] __attribute__ ((__aligned__(16)));
-struct foostr res[16] = {};
-void
-foo (void)
-{
-  int i;
-  for (i = 0; i < 16; i++)
-    {
-      if (c[i].f1 != res[i].f1)
- abort ();
-      if (c[i].f2 != res[i].f2)
- abort ();
-    }
-}
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break_5.c b/gcc/testsuite/gcc.dg/vect/vect-early-break_5.c
deleted file mode 100644
index 1468c795b620..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break_5.c
+++ /dev/null
@@ -1,25 +0,0 @@
-/* { dg-add-options vect_early_break } */
-/* { dg-do compile } */
-/* { dg-require-effective-target vect_early_break } */
-/* { dg-require-effective-target vect_int } */
-
-/* { dg-additional-options "-Ofast" } */
-
-/* { dg-final { scan-tree-dump "LOOP VECTORIZED" "vect" } } */
-
-#define N 1024
-unsigned vect_a[N];
-unsigned vect_b[N];
- 
-unsigned test4(unsigned x)
-{
- unsigned ret = 0;
- for (int i = 0; i < N; i++)
- {
-   vect_b[i] = x + i;
-   if (vect_a[i] > x)
-     return vect_a[i];
-   vect_a[i] = x;
- }
- return ret;
-}
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break_50.c b/gcc/testsuite/gcc.dg/vect/vect-early-break_50.c
deleted file mode 100644
index b3cf2d7f05f0..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break_50.c
+++ /dev/null
@@ -1,18 +0,0 @@
-/* { dg-add-options vect_early_break } */
-/* { dg-do compile } */
-/* { dg-require-effective-target vect_early_break } */
-/* { dg-require-effective-target vect_float } */
-
-extern void abort();
-float a[1024], b[1024], c[1024], d[1024];
-_Bool k[1024];
-
-int main ()
-{
-  int i;
-  for (i = 0; i < 1024; i++)
-    if (k[i] != ((i % 3) == 0 && ((i / 9) % 3) == 0))
-      abort ();
-}
-
-/* { dg-final { scan-tree-dump "vectorized 1 loops in function" "vect" { xfail *-*-* } } } */
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break_51.c b/gcc/testsuite/gcc.dg/vect/vect-early-break_51.c
deleted file mode 100644
index c06eff5a385f..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break_51.c
+++ /dev/null
@@ -1,26 +0,0 @@
-/* { dg-add-options vect_early_break } */
-/* { dg-do compile } */
-/* { dg-require-effective-target vect_early_break } */
-/* { dg-require-effective-target vect_int } */
-
-int x_in[32];
-int x_out_a[32], x_out_b[32];
-int c[16] = {3,2,1,10,1,42,3,4,50,9,32,8,11,10,1,2};
-int a[16 +1] = {0,16,32,48,64,128,256,512,0,16,32,48,64,128,256,512,1024};
-int b[16 +1] = {17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1};
-
-void foo ()
-{
-  int j, i, x;
-  int curr_a, flag, next_a, curr_b, next_b;
-    {
-      for (i = 0; i < 16; i++)
-        {
-          next_b = b[i+1];
-          curr_b = flag ? next_b : curr_b;
-        }
-      x_out_b[j] = curr_b;
-    }
-}
-
-/* { dg-final { scan-tree-dump "vectorized 1 loops in function" "vect" } } */
\ No newline at end of file
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break_52.c b/gcc/testsuite/gcc.dg/vect/vect-early-break_52.c
deleted file mode 100644
index 86a632f2a822..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break_52.c
+++ /dev/null
@@ -1,21 +0,0 @@
-/* { dg-add-options vect_early_break } */
-/* { dg-do compile } */
-/* { dg-require-effective-target vect_early_break } */
-/* { dg-require-effective-target vect_int } */
-
-void abort();
-int main1 (short X)
-{
-  unsigned char a[128];
-  unsigned short b[128];
-  unsigned int c[128];
-  short myX = X;
-  int i;
-  for (i = 0; i < 128; i++)
-    {
-      if (a[i] != (unsigned char)myX || b[i] != myX || c[i] != (unsigned int)myX++)
-        abort ();
-    }
-}
-
-/* { dg-final { scan-tree-dump "vectorized 1 loops in function" "vect" { target { ! "x86_64-*-* i?86-*-*" } } } } */
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break_53.c b/gcc/testsuite/gcc.dg/vect/vect-early-break_53.c
deleted file mode 100644
index a02d5986ba3c..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break_53.c
+++ /dev/null
@@ -1,18 +0,0 @@
-/* { dg-add-options vect_early_break } */
-/* { dg-do compile } */
-/* { dg-require-effective-target vect_early_break } */
-/* { dg-require-effective-target vect_int } */
-
-void abort ();
-int a[64], b[64];
-int main ()
-{
-  int c = 7;
-  for (int i = 1; i < 64; ++i)
-    if (b[i] != a[i] - a[i-1])
-      abort ();
-  if (b[0] != -7)
-    abort ();
-}
-
-/* { dg-final { scan-tree-dump "vectorized 1 loops in function" "vect" } } */
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break_54.c b/gcc/testsuite/gcc.dg/vect/vect-early-break_54.c
deleted file mode 100644
index bfc78c262751..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break_54.c
+++ /dev/null
@@ -1,30 +0,0 @@
-/* { dg-add-options vect_early_break } */
-/* { dg-do compile } */
-/* { dg-require-effective-target vect_early_break } */
-/* { dg-require-effective-target vect_int } */
-
-/* { dg-additional-options "-Ofast" } */
-
-/* { dg-final { scan-tree-dump "LOOP VECTORIZED" "vect" } } */
-
-#ifndef N
-#define N 803
-#endif
-unsigned vect_a[N];
-unsigned vect_b[N];
-  
-unsigned test4(unsigned x)
-{
- unsigned ret = 0;
- unsigned tmp[N];
- for (int i = 0; i < N; i++)
- {
-   tmp[i] = x + i;
-   vect_b[i] = tmp[i];
-   if (vect_a[i] > x)
-     break;
-   vect_a[i] = x;
-   
- }
- return ret;
-}
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break_55.c b/gcc/testsuite/gcc.dg/vect/vect-early-break_55.c
deleted file mode 100644
index c2a823bff7a4..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break_55.c
+++ /dev/null
@@ -1,29 +0,0 @@
-/* { dg-add-options vect_early_break } */
-/* { dg-do compile } */
-/* { dg-require-effective-target vect_early_break } */
-/* { dg-require-effective-target vect_int } */
-
-/* { dg-additional-options "-Ofast" } */
-
-/* { dg-final { scan-tree-dump-not "LOOP VECTORIZED" "vect" } } */
-
-#ifndef N
-#define N 803
-#endif
-unsigned vect_a[N];
-unsigned vect_b[N];
-  
-unsigned test4(unsigned x)
-{
- unsigned ret = 0;
- for (int i = 0; i < N; i++)
- {
-   volatile unsigned tmp = x + i;
-   vect_b[i] = tmp;
-   if (vect_a[i] > x)
-     break;
-   vect_a[i] = x;
-   
- }
- return ret;
-}
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break_56.c b/gcc/testsuite/gcc.dg/vect/vect-early-break_56.c
deleted file mode 100644
index 9096f66647c7..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break_56.c
+++ /dev/null
@@ -1,102 +0,0 @@
-/* { dg-add-options vect_early_break } */
-/* Disabling epilogues until we find a better way to deal with scans.  */
-/* { dg-additional-options "--param vect-epilogues-nomask=0" } */
-/* { dg-require-effective-target vect_int } */
-/* { dg-add-options bind_pic_locally } */
-/* { dg-require-effective-target vect_early_break_hw } */
-
-#include <stdarg.h>
-#include "tree-vect.h"
-
-#define N 32
-
-unsigned short sa[N];
-unsigned short sc[N] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,
-		16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31};
-unsigned short sb[N] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,
-		16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31};
-unsigned int ia[N];
-unsigned int ic[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,
-	       0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};
-unsigned int ib[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,
-	       0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};
-
-/* Current peeling-for-alignment scheme will consider the 'sa[i+7]'
-   access for peeling, and therefore will examine the option of
-   using a peeling factor = VF-7%VF. This will result in a peeling factor 1,
-   which will also align the access to 'ia[i+3]', and the loop could be
-   vectorized on all targets that support unaligned loads.
-   Without cost model on targets that support misaligned stores, no peeling
-   will be applied since we want to keep the four loads aligned.  */
-
-__attribute__ ((noinline))
-int main1 ()
-{
-  int i;
-  int n = N - 7;
-
-  /* Multiple types with different sizes, used in independent
-     copmutations. Vectorizable.  */
-  for (i = 0; i < n; i++)
-    {
-      sa[i+7] = sb[i] + sc[i];
-      ia[i+3] = ib[i] + ic[i];
-    }
-
-  /* check results:  */
-  for (i = 0; i < n; i++)
-    {
-      if (sa[i+7] != sb[i] + sc[i] || ia[i+3] != ib[i] + ic[i])
-	abort ();
-    }
-
-  return 0;
-}
-
-/* Current peeling-for-alignment scheme will consider the 'ia[i+3]'
-   access for peeling, and therefore will examine the option of
-   using a peeling factor = VF-3%VF. This will result in a peeling factor
-   1 if VF=4,2. This will not align the access to 'sa[i+3]', for which we 
-   need to peel 5,1 iterations for VF=4,2 respectively, so the loop can not 
-   be vectorized.  However, 'ia[i+3]' also gets aligned if we peel 5
-   iterations, so the loop is vectorizable on all targets that support
-   unaligned loads.
-   Without cost model on targets that support misaligned stores, no peeling
-   will be applied since we want to keep the four loads aligned.  */
-
-__attribute__ ((noinline))
-int main2 ()
-{
-  int i;
-  int n = N-3;
-
-  /* Multiple types with different sizes, used in independent
-     copmutations. Vectorizable.  */
-  for (i = 0; i < n; i++)
-    {
-      ia[i+3] = ib[i] + ic[i];
-      sa[i+3] = sb[i] + sc[i];
-    }
-
-  /* check results:  */
-  for (i = 0; i < n; i++)
-    {
-      if (sa[i+3] != sb[i] + sc[i] || ia[i+3] != ib[i] + ic[i])
-        abort ();
-    }
-
-  return 0;
-}
-
-int main (void)
-{ 
-  check_vect ();
-  
-  main1 ();
-  main2 ();
-
-  return 0;
-}
-
-/* { dg-final { scan-tree-dump-times "vectorized 2 loops" 2 "vect" { xfail { vect_early_break && { ! vect_hw_misalign } } } } } */
-
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break_57.c b/gcc/testsuite/gcc.dg/vect/vect-early-break_57.c
deleted file mode 100644
index 319bd125c315..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break_57.c
+++ /dev/null
@@ -1,32 +0,0 @@
-/* { dg-add-options vect_early_break } */
-/* { dg-do compile } */
-/* { dg-require-effective-target vect_early_break } */
-/* { dg-require-effective-target vect_int } */
-
-/* { dg-additional-options "-Ofast" } */
-
-/* { dg-final { scan-tree-dump "LOOP VECTORIZED" "vect" } } */
-/* { dg-final { scan-tree-dump "epilog loop required" "vect" } } */
-
-void abort ();
-
-unsigned short sa[32];
-unsigned short sc[32] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,
-  16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31};
-unsigned short sb[32] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,
-  16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31};
-unsigned int ia[32];
-unsigned int ic[32] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,
-        0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};
-unsigned int ib[32] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,
-        0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};
-
-int main2 (int n)
-{
-  int i;
-  for (i = 0; i < n; i++)
-    {
-      if (sa[i+3] != sb[i] + sc[i] || ia[i+3] != ib[i] + ic[i])
-        abort ();
-    }
-}
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break_58.c b/gcc/testsuite/gcc.dg/vect/vect-early-break_58.c
deleted file mode 100644
index 5f18f06d423f..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break_58.c
+++ /dev/null
@@ -1,19 +0,0 @@
-/* { dg-add-options vect_early_break } */
-/* { dg-do compile } */
-/* { dg-require-effective-target vect_early_break } */
-/* { dg-require-effective-target vect_float } */
-
-extern void abort();
-float a[1024], b[1024], c[1024], d[1024];
-_Bool k[1024];
-
-int main ()
-{
-  int i;
-  for (i = 0; i < 1024; i++)
-    if (k[i] != ((i % 3) == 0))
-      abort ();
-}
-
-/* Pattern didn't match inside gcond.  */
-/* { dg-final { scan-tree-dump "vectorized 1 loops in function" "vect" { xfail *-*-* } } } */
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break_59.c b/gcc/testsuite/gcc.dg/vect/vect-early-break_59.c
deleted file mode 100644
index aec4ee457d78..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break_59.c
+++ /dev/null
@@ -1,18 +0,0 @@
-/* { dg-add-options vect_early_break } */
-/* { dg-do compile } */
-/* { dg-require-effective-target vect_early_break } */
-/* { dg-require-effective-target vect_float } */
-
-extern void abort();
-float a[1024], b[1024], c[1024], d[1024];
-_Bool k[1024];
-
-int main ()
-{
-  int i;
-  for (i = 0; i < 1024; i++)
-    if (k[i] != (i == 0))
-      abort ();
-}
-
-/* { dg-final { scan-tree-dump "vectorized 1 loops in function" "vect" { xfail *-*-* } } } */
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break_6.c b/gcc/testsuite/gcc.dg/vect/vect-early-break_6.c
deleted file mode 100644
index 7b870e9c60dc..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break_6.c
+++ /dev/null
@@ -1,27 +0,0 @@
-/* { dg-add-options vect_early_break } */
-/* { dg-do compile } */
-/* { dg-require-effective-target vect_early_break } */
-/* { dg-require-effective-target vect_int } */
-
-/* { dg-additional-options "-Ofast" } */
-
-/* { dg-final { scan-tree-dump "LOOP VECTORIZED" "vect" } } */
-
-#define N 1024
-unsigned vect_a[N];
-unsigned vect_b[N];
-  
-unsigned test4(unsigned x)
-{
- unsigned ret = 0;
- for (int i = 0; i < (N/2); i+=2)
- {
-   vect_b[i] = x + i;
-   vect_b[i+1] = x + i+1;
-   if (vect_a[i] > x || vect_a[i+1] > x)
-     break;
-   vect_a[i] += x * vect_b[i];
-   vect_a[i+1] += x * vect_b[i+1]; 
- }
- return ret;
-}
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break_60.c b/gcc/testsuite/gcc.dg/vect/vect-early-break_60.c
deleted file mode 100644
index 75b35f8d423f..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break_60.c
+++ /dev/null
@@ -1,18 +0,0 @@
-/* { dg-add-options vect_early_break } */
-/* { dg-do compile } */
-/* { dg-require-effective-target vect_early_break } */
-/* { dg-require-effective-target vect_float } */
-
-extern void abort();
-float a[1024], b[1024], c[1024], d[1024];
-_Bool k[1024];
-
-int main ()
-{
-  char i;
-  for (i = 0; i < 1024; i++)
-    if (k[i] != (i == 0))
-      abort ();
-}
-
-/* { dg-final { scan-tree-dump "vectorized 1 loops in function" "vect" { xfail *-*-* } } } */
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break_61.c b/gcc/testsuite/gcc.dg/vect/vect-early-break_61.c
deleted file mode 100644
index c789ec01f32c..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break_61.c
+++ /dev/null
@@ -1,18 +0,0 @@
-/* { dg-add-options vect_early_break } */
-/* { dg-do compile } */
-/* { dg-require-effective-target vect_early_break } */
-/* { dg-require-effective-target vect_float } */
-
-typedef float real_t;
-__attribute__((aligned(64))) real_t a[32000], b[32000], c[32000];
-real_t s482()
-{
-    for (int nl = 0; nl < 10000; nl++) {
-        for (int i = 0; i < 32000; i++) {
-            a[i] += b[i] * c[i];
-            if (c[i] > b[i]) break;
-        }
-    }
-}
-
-/* { dg-final { scan-tree-dump "vectorized 1 loops in function" "vect" } } */
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break_62.c b/gcc/testsuite/gcc.dg/vect/vect-early-break_62.c
deleted file mode 100644
index aaad62ef8d78..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break_62.c
+++ /dev/null
@@ -1,21 +0,0 @@
-/* { dg-add-options vect_early_break } */
-/* { dg-do compile } */
-/* { dg-require-effective-target vect_early_break } */
-/* { dg-require-effective-target vect_int } */
-
-int a, b;
-int e() {
-  int d, c;
-  d = 0;
-  for (; d < b; d++)
-    a = 0;
-  d = 0;
-  for (; d < b; d++)
-    if (d)
-      c++;
-  for (;;)
-    if (c)
-      break;
-}
-
-/* { dg-final { scan-tree-dump "vectorized 1 loops in function" "vect" } } */
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break_63.c b/gcc/testsuite/gcc.dg/vect/vect-early-break_63.c
deleted file mode 100644
index 1d9ff4ad6bac..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break_63.c
+++ /dev/null
@@ -1,29 +0,0 @@
-/* { dg-add-options vect_early_break } */
-/* Disabling epilogues until we find a better way to deal with scans.  */
-/* { dg-do compile } */
-/* { dg-additional-options "--param vect-epilogues-nomask=0" } */
-/* { dg-require-effective-target vect_long } */
-/* { dg-require-effective-target vect_shift } */
-/* { dg-additional-options "-fno-tree-scev-cprop" } */
-
-/* Statement used outside the loop.
-   NOTE: SCEV disabled to ensure the live operation is not removed before
-   vectorization.  */
-__attribute__ ((noinline)) int
-liveloop (int start, int n, int *x, int *y)
-{
-  int i = start;
-  int j;
-  int ret;
-
-  for (j = 0; j < n; ++j)
-    {
-      i += 1;
-      x[j] = i;
-      ret = y[j];
-    }
-  return ret;
-}
-
-/* { dg-final { scan-tree-dump-times "vectorized 1 loops" 1 "vect" } } */
-/* { dg-final { scan-tree-dump-times "vec_stmt_relevant_p: stmt live but not relevant" 1 "vect" } } */
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break_64.c b/gcc/testsuite/gcc.dg/vect/vect-early-break_64.c
deleted file mode 100644
index aaa2a46fb67e..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break_64.c
+++ /dev/null
@@ -1,18 +0,0 @@
-/* { dg-add-options vect_early_break } */
-/* { dg-do compile } */
-/* { dg-require-effective-target vect_early_break } */
-/* { dg-require-effective-target vect_int } */
-/* { dg-additional-options "-fdump-tree-vect-all" } */
-
-int d(unsigned);
-
-void a() {
-  char b[8];
-  unsigned c = 0;
-  while (c < 7 && b[c])
-    ++c;
-  if (d(c))
-    return;
-}
-
-/* { dg-final { scan-tree-dump-times "vectorized 1 loops" 1 "vect" { target vect_partial_vectors } } } */
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break_65.c b/gcc/testsuite/gcc.dg/vect/vect-early-break_65.c
deleted file mode 100644
index 23a8341b529d..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break_65.c
+++ /dev/null
@@ -1,20 +0,0 @@
-/* { dg-add-options vect_early_break } */
-/* { dg-do compile } */
-/* { dg-require-effective-target vect_early_break } */
-/* { dg-require-effective-target vect_int } */
-/* { dg-options "-Ofast -fno-vect-cost-model -fdump-tree-vect-details" } */
-
-enum a { b };
-
-struct {
-  enum a c;
-} d[10], *e;
-
-void f() {
-  int g;
-  for (g = 0, e = d; g < sizeof(1); g++, e++)
-    if (e->c)
-      return;
-}
-
-/* { dg-final { scan-tree-dump-times "vectorized 1 loops" 0 "vect" } } */
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break_66.c b/gcc/testsuite/gcc.dg/vect/vect-early-break_66.c
deleted file mode 100644
index e54cc5e1260e..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break_66.c
+++ /dev/null
@@ -1,28 +0,0 @@
-/* { dg-add-options vect_early_break } */
-/* { dg-do compile } */
-/* { dg-require-effective-target vect_early_break } */
-/* { dg-require-effective-target vect_int } */
-
-int a[0];
-int b;
-
-void g();
-
-void f() {
-  int d, e;
-  for (; e; e++) {
-    int c;
-    switch (b)
-    case '9': {
-      for (; d < 1; d++)
-        if (a[d])
-          c = 1;
-      break;
-    case '<':
-      g();
-      c = 0;
-    }
-      while (c)
-        ;
-  }
-}
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break_67.c b/gcc/testsuite/gcc.dg/vect/vect-early-break_67.c
deleted file mode 100644
index e9da46439f27..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break_67.c
+++ /dev/null
@@ -1,42 +0,0 @@
-/* { dg-add-options vect_early_break } */
-/* { dg-do compile } */
-/* { dg-require-effective-target int32plus } */
-/* { dg-require-effective-target vect_early_break } */
-/* { dg-require-effective-target vect_int } */
-
-/* { dg-final { scan-tree-dump "LOOP VECTORIZED" "vect" { target { ! "x86_64-*-* i?86-*-*" } } } } */
-
-
-
-int main()
-{
-  int var6 = -1267827473;
-  do {
-      ++var6;
-      double s1_115[4], s2_108[4];
-      int var8 = -161498264;
-      do {
-	  ++var8;
-	  int var12 = 1260960076;
-	  for (; var12 <= 1260960080; ++var12) {
-	      int var13 = 1960990937;
-	      do {
-		  ++var13;
-		  int var14 = 2128638723;
-		  for (; var14 <= 2128638728; ++var14) {
-		      int var22 = -1141190839;
-		      do {
-			  ++var22;
-			  if (s2_108 > s1_115) {
-			      int var23 = -890798748;
-			      do {
-				  long long e_119[4];
-			      } while (var23 <= -890798746);
-			  }
-		      } while (var22 <= -1141190829);
-		  }
-	      } while (var13 <= 1960990946);
-	  }
-      } while (var8 <= -161498254);
-  } while (var6 <= -1267827462);
-}
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break_68.c b/gcc/testsuite/gcc.dg/vect/vect-early-break_68.c
deleted file mode 100644
index dfa90b557e87..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break_68.c
+++ /dev/null
@@ -1,42 +0,0 @@
-/* { dg-add-options vect_early_break } */
-/* { dg-do compile } */
-/* { dg-require-effective-target vect_early_break } */
-/* { dg-require-effective-target vect_int } */
-
-/* { dg-final { scan-tree-dump "LOOP VECTORIZED" "vect" } } */
-
-#ifndef N
-#define N 800
-#endif
-unsigned vect_a1[N];
-unsigned vect_b1[N];
-unsigned vect_c1[N];
-unsigned vect_d1[N];
-  
-unsigned vect_a2[N];
-unsigned vect_b2[N];
-unsigned vect_c2[N];
-unsigned vect_d2[N];
-
-unsigned test4(unsigned x)
-{
- unsigned ret = 0;
- for (int i = 0; i < N; i++)
- {
-   vect_b1[i] += x + i;
-   vect_c1[i] += x + i;
-   vect_d1[i] += x + i;
-   if (vect_a1[i]*2 != x)
-     break;
-   vect_a1[i] = x;
-
-   vect_b2[i] += x + i;
-   vect_c2[i] += x + i;
-   vect_d2[i] += x + i;
-   if (vect_a2[i]*2 != x)
-     break;
-   vect_a2[i] = x;
-
- }
- return ret;
-}
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break_69.c b/gcc/testsuite/gcc.dg/vect/vect-early-break_69.c
deleted file mode 100644
index 916351a14ab4..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break_69.c
+++ /dev/null
@@ -1,80 +0,0 @@
-/* { dg-add-options vect_early_break } */
-/* { dg-require-effective-target vect_early_break_hw } */
-/* { dg-require-effective-target vect_int } */
-
-#include <limits.h>
-#include <assert.h>
-
-#include "tree-vect.h"
-
-#  define BITSIZEOF_INT 32
-#  define BITSIZEOF_LONG 64
-#  define BITSIZEOF_LONG_LONG 64
-
-#define MAKE_FUNS(suffix, type)						\
-int my_ffs##suffix(type x) {						\
-    int i;								\
-    if (x == 0)								\
-	 return 0; 							\
-    for (i = 0; i < CHAR_BIT * sizeof (type); i++)			\
-	if (x & ((type) 1  << i))					\
-	    break;							\
-    return i + 1;							\
-}									\
-									\
-int my_clz##suffix(type x) {						\
-    int i;								\
-    for (i = 0; i < CHAR_BIT * sizeof (type); i++)			\
-	if (x & ((type) 1 << ((CHAR_BIT * sizeof (type)) - i - 1)))	\
-	    break;							\
-    return i;								\
-}
-
-
-MAKE_FUNS (, unsigned);
-
-extern void abort (void);
-extern void exit (int);
-
-#define NUMS32					\
-  {                                             \
-    0x00000000UL,                               \
-    0x00000001UL,                               \
-    0x80000000UL,                               \
-    0x00000002UL,                               \
-    0x40000000UL,                               \
-    0x00010000UL,                               \
-    0x00008000UL,                               \
-    0xa5a5a5a5UL,                               \
-    0x5a5a5a5aUL,                               \
-    0xcafe0000UL,                               \
-    0x00cafe00UL,                               \
-    0x0000cafeUL,                               \
-    0xffffffffUL                                \
-  }
-
-
-unsigned int ints[] = NUMS32;
-
-#define N(table) (sizeof (table) / sizeof (table[0]))
-
-int
-main (void)
-{
-  int i;
-
-  check_vect ();
-
-  for (i = 0; i < N(ints); i++)
-    {
-      if (__builtin_ffs (ints[i]) != my_ffs (ints[i]))
-	abort ();
-      if (ints[i] != 0
-	  && __builtin_clz (ints[i]) != my_clz (ints[i]))
-	abort ();
-    }
-
-  exit (0);
-}
-
-/* { dg-final { scan-tree-dump "LOOP VECTORIZED" "vect" { target { ! "x86_64-*-* i?86-*-*" } } } } */
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break_7.c b/gcc/testsuite/gcc.dg/vect/vect-early-break_7.c
deleted file mode 100644
index 8c86c5034d75..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break_7.c
+++ /dev/null
@@ -1,28 +0,0 @@
-/* { dg-add-options vect_early_break } */
-/* { dg-do compile } */
-/* { dg-require-effective-target vect_early_break } */
-/* { dg-require-effective-target vect_int } */
-
-/* { dg-additional-options "-Ofast" } */
-
-/* { dg-final { scan-tree-dump "LOOP VECTORIZED" "vect" } } */
-
-#include <complex.h>
-
-#define N 1024
-complex double vect_a[N];
-complex double vect_b[N];
-  
-complex double test4(complex double x)
-{
- complex double ret = 0;
- for (int i = 0; i < N; i++)
- {
-   vect_b[i] += x + i;
-   if (vect_a[i] == x)
-     break;
-   vect_a[i] += x * vect_b[i];
-   
- }
- return ret;
-}
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break_70.c b/gcc/testsuite/gcc.dg/vect/vect-early-break_70.c
deleted file mode 100644
index 3dbedf610406..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break_70.c
+++ /dev/null
@@ -1,69 +0,0 @@
-/* { dg-add-options vect_early_break } */
-/* { dg-require-effective-target vect_early_break_hw } */
-/* { dg-require-effective-target vect_int } */
-
-/* { dg-final { scan-tree-dump "LOOP VECTORIZED" "vect" { target { ! "x86_64-*-* i?86-*-*" } } } } */
-
-#include <limits.h>
-#include <assert.h>
-
-#include "tree-vect.h"
-
-#  define BITSIZEOF_INT 32
-#  define BITSIZEOF_LONG 64
-#  define BITSIZEOF_LONG_LONG 64
-
-#define MAKE_FUNS(suffix, type)						\
-__attribute__((noinline)) \
-int my_clz##suffix(type x) {						\
-    int i;								\
-    for (i = 0; i < CHAR_BIT * sizeof (type); i++)			\
-	if (x & ((type) 1 << ((CHAR_BIT * sizeof (type)) - i - 1)))	\
-	    break;							\
-    return i;								\
-}
-
-
-MAKE_FUNS (, unsigned);
-
-extern void abort (void);
-extern void exit (int);
-
-#define NUMS32					\
-  {                                             \
-    0x00000000UL,                               \
-    0x00000001UL,                               \
-    0x80000000UL,                               \
-    0x00000002UL,                               \
-    0x40000000UL,                               \
-    0x00010000UL,                               \
-    0x00008000UL,                               \
-    0xa5a5a5a5UL,                               \
-    0x5a5a5a5aUL,                               \
-    0xcafe0000UL,                               \
-    0x00cafe00UL,                               \
-    0x0000cafeUL,                               \
-    0xffffffffUL                                \
-  }
-
-
-unsigned int ints[] = NUMS32;
-
-#define N(table) (sizeof (table) / sizeof (table[0]))
-
-int
-main (void)
-{
-  int i;
-
-  for (i = 0; i < N(ints); i++)
-    {
-      if (ints[i] != 0
-	  && __builtin_clz (ints[i]) != my_clz (ints[i]))
-	  abort ();
-    }
-
-  exit (0);
-  return 0;
-}
-
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break_71.c b/gcc/testsuite/gcc.dg/vect/vect-early-break_71.c
deleted file mode 100644
index b15c8de3ed75..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break_71.c
+++ /dev/null
@@ -1,71 +0,0 @@
-/* { dg-add-options vect_early_break } */
-/* { dg-require-effective-target vect_early_break_hw } */
-/* { dg-require-effective-target vect_int } */
-
-/* { dg-final { scan-tree-dump "LOOP VECTORIZED" "vect" { target { ! "x86_64-*-* i?86-*-*" } } } } */
-
-#include <limits.h>
-#include <assert.h>
-
-#include "tree-vect.h"
-
-#  define BITSIZEOF_INT 32
-#  define BITSIZEOF_LONG 64
-#  define BITSIZEOF_LONG_LONG 64
-
-#define MAKE_FUNS(suffix, type)						\
-__attribute__((noinline)) \
-int my_ffs##suffix(type x) {						\
-    int i;								\
-    if (x == 0)								\
-	 return 0; 							\
-    for (i = 0; i < CHAR_BIT * sizeof (type); i++)			\
-	if (x & ((type) 1  << i))					\
-	    break;							\
-    return i + 1;							\
-}
-
-MAKE_FUNS (, unsigned);
-
-extern void abort (void);
-extern void exit (int);
-
-#define NUMS32					\
-  {                                             \
-    0x00000000UL,                               \
-    0x00000001UL,                               \
-    0x80000000UL,                               \
-    0x00000002UL,                               \
-    0x40000000UL,                               \
-    0x00010000UL,                               \
-    0x00008000UL,                               \
-    0xa5a5a5a5UL,                               \
-    0x5a5a5a5aUL,                               \
-    0xcafe0000UL,                               \
-    0x00cafe00UL,                               \
-    0x0000cafeUL,                               \
-    0xffffffffUL                                \
-  }
-
-
-unsigned int ints[] = NUMS32;
-
-#define N(table) (sizeof (table) / sizeof (table[0]))
-
-int
-main (void)
-{
-  int i;
-
-  check_vect ();
-
-#pragma GCC novector
-  for (i = 0; i < N(ints); i++)
-    {
-      if (__builtin_ffs (ints[i]) != my_ffs (ints[i]))
-	abort ();
-    }
-
-  exit (0);
-}
-
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break_72.c b/gcc/testsuite/gcc.dg/vect/vect-early-break_72.c
deleted file mode 100644
index c6d1e9f5fd26..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break_72.c
+++ /dev/null
@@ -1,151 +0,0 @@
-/* { dg-add-options vect_early_break } */
-/* { dg-require-effective-target vect_early_break_hw } */
-/* { dg-require-effective-target vect_int } */
-
-/* { dg-final { scan-tree-dump "LOOP VECTORIZED" "vect" { target { ! "x86_64-*-* i?86-*-*" } } } } */
-
-#include <limits.h>
-#include <assert.h>
-
-#include "tree-vect.h"
-
-#if __INT_MAX__ > 2147483647L
-# if __INT_MAX__ >= 9223372036854775807L
-#  define BITSIZEOF_INT 64
-# else
-#  define BITSIZEOF_INT 32
-# endif
-#else
-# if __INT_MAX__ >= 2147483647L
-#  define BITSIZEOF_INT 32
-# else
-#  define BITSIZEOF_INT 16
-# endif
-#endif
-
-#if __LONG_MAX__ > 2147483647L
-# if __LONG_MAX__ >= 9223372036854775807L
-#  define BITSIZEOF_LONG 64
-# else
-#  define BITSIZEOF_LONG 32
-# endif
-#else
-# define BITSIZEOF_LONG 32
-#endif
-
-#if __LONG_LONG_MAX__ > 2147483647L
-# if __LONG_LONG_MAX__ >= 9223372036854775807L
-#  define BITSIZEOF_LONG_LONG 64
-# else
-#  define BITSIZEOF_LONG_LONG 32
-# endif
-#else
-# define BITSIZEOF_LONG_LONG 32
-#endif
-
-#define MAKE_FUNS(suffix, type)						\
-__attribute__((noinline)) \
-int my_ctz##suffix(type x) {						\
-    int i;								\
-    for (i = 0; i < CHAR_BIT * sizeof (type); i++)			\
-	if (x & ((type) 1  << i))					\
-	    break;							\
-    return i;								\
-}
-
-MAKE_FUNS (, unsigned);
-
-extern void abort (void);
-extern void exit (int);
-
-#define NUMS16					\
-  {						\
-    0x0000U,					\
-    0x0001U,					\
-    0x8000U,					\
-    0x0002U,					\
-    0x4000U,					\
-    0x0100U,					\
-    0x0080U,					\
-    0xa5a5U,					\
-    0x5a5aU,					\
-    0xcafeU,					\
-    0xffffU					\
-  }
-
-#define NUMS32					\
-  {						\
-    0x00000000UL,				\
-    0x00000001UL,				\
-    0x80000000UL,				\
-    0x00000002UL,				\
-    0x40000000UL,				\
-    0x00010000UL,				\
-    0x00008000UL,				\
-    0xa5a5a5a5UL,				\
-    0x5a5a5a5aUL,				\
-    0xcafe0000UL,				\
-    0x00cafe00UL,				\
-    0x0000cafeUL,				\
-    0xffffffffUL				\
-  }
-
-#define NUMS64					\
-  {						\
-    0x0000000000000000ULL,			\
-    0x0000000000000001ULL,			\
-    0x8000000000000000ULL,			\
-    0x0000000000000002ULL,			\
-    0x4000000000000000ULL,			\
-    0x0000000100000000ULL,			\
-    0x0000000080000000ULL,			\
-    0xa5a5a5a5a5a5a5a5ULL,			\
-    0x5a5a5a5a5a5a5a5aULL,			\
-    0xcafecafe00000000ULL,			\
-    0x0000cafecafe0000ULL,			\
-    0x00000000cafecafeULL,			\
-    0xffffffffffffffffULL			\
-  }
-
-unsigned int ints[] =
-#if BITSIZEOF_INT == 64
-NUMS64;
-#elif BITSIZEOF_INT == 32
-NUMS32;
-#else
-NUMS16;
-#endif
-
-unsigned long longs[] =
-#if BITSIZEOF_LONG == 64
-NUMS64;
-#else
-NUMS32;
-#endif
-
-unsigned long long longlongs[] =
-#if BITSIZEOF_LONG_LONG == 64
-NUMS64;
-#else
-NUMS32;
-#endif
-
-#define N(table) (sizeof (table) / sizeof (table[0]))
-
-int
-main (void)
-{
-  int i;
-
-  check_vect ();
-
-#pragma GCC novector
-  for (i = 0; i < N(ints); i++)
-    {
-      if (ints[i] != 0
-	  && __builtin_ctz (ints[i]) != my_ctz (ints[i]))
-	  abort ();
-    }
-
-  exit (0);
-}
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break_73.c b/gcc/testsuite/gcc.dg/vect/vect-early-break_73.c
deleted file mode 100644
index 7f40dd07e543..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break_73.c
+++ /dev/null
@@ -1,71 +0,0 @@
-/* { dg-add-options vect_early_break } */
-/* { dg-require-effective-target vect_early_break_hw } */
-/* { dg-require-effective-target vect_int } */
-
-/* { dg-final { scan-tree-dump "LOOP VECTORIZED" "vect" { target { ! "x86_64-*-* i?86-*-*" } } } } */
-
-#include <limits.h>
-#include <assert.h>
-
-#include "tree-vect.h"
-
-#  define BITSIZEOF_INT 32
-#  define BITSIZEOF_LONG 64
-#  define BITSIZEOF_LONG_LONG 64
-
-#define MAKE_FUNS(suffix, type)						\
-__attribute__((noinline)) \
-int my_clz##suffix(type x) {						\
-    int i;								\
-    for (i = 0; i < CHAR_BIT * sizeof (type); i++)			\
-	if (x & ((type) 1 << ((CHAR_BIT * sizeof (type)) - i - 1)))	\
-	    break;							\
-    return i;								\
-}
-
-
-MAKE_FUNS (, unsigned);
-
-extern void abort (void);
-extern void exit (int);
-
-#define NUMS32					\
-  {                                             \
-    0x00000000UL,                               \
-    0x00000001UL,                               \
-    0x80000000UL,                               \
-    0x00000002UL,                               \
-    0x40000000UL,                               \
-    0x00010000UL,                               \
-    0x00008000UL,                               \
-    0xa5a5a5a5UL,                               \
-    0x5a5a5a5aUL,                               \
-    0xcafe0000UL,                               \
-    0x00cafe00UL,                               \
-    0x0000cafeUL,                               \
-    0xffffffffUL                                \
-  }
-
-
-unsigned int ints[] = NUMS32;
-
-#define N(table) (sizeof (table) / sizeof (table[0]))
-
-int
-main (void)
-{
-  int i;
-
-  check_vect ();
-
-#pragma GCC novector
-  for (i = 0; i < N(ints); i++)
-    {
-      if (ints[i] != 0
-	  && __builtin_clz (ints[i]) != my_clz (ints[i]))
-	  abort ();
-    }
-
-  exit (0);
-}
-
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break_74.c b/gcc/testsuite/gcc.dg/vect/vect-early-break_74.c
deleted file mode 100644
index afd238618b30..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break_74.c
+++ /dev/null
@@ -1,165 +0,0 @@
-/* { dg-add-options vect_early_break } */
-/* { dg-require-effective-target vect_early_break_hw } */
-/* { dg-require-effective-target vect_int } */
-
-/* { dg-final { scan-tree-dump "LOOP VECTORIZED" "vect" { target { ! "x86_64-*-* i?86-*-*" } } } } */
-
-#include <limits.h>
-#include <assert.h>
-
-#include "tree-vect.h"
-
-#if __INT_MAX__ > 2147483647L
-# if __INT_MAX__ >= 9223372036854775807L
-#  define BITSIZEOF_INT 64
-# else
-#  define BITSIZEOF_INT 32
-# endif
-#else
-# if __INT_MAX__ >= 2147483647L
-#  define BITSIZEOF_INT 32
-# else
-#  define BITSIZEOF_INT 16
-# endif
-#endif
-
-#if __LONG_MAX__ > 2147483647L
-# if __LONG_MAX__ >= 9223372036854775807L
-#  define BITSIZEOF_LONG 64
-# else
-#  define BITSIZEOF_LONG 32
-# endif
-#else
-# define BITSIZEOF_LONG 32
-#endif
-
-#if __LONG_LONG_MAX__ > 2147483647L
-# if __LONG_LONG_MAX__ >= 9223372036854775807L
-#  define BITSIZEOF_LONG_LONG 64
-# else
-#  define BITSIZEOF_LONG_LONG 32
-# endif
-#else
-# define BITSIZEOF_LONG_LONG 32
-#endif
-
-#define MAKE_FUNS(suffix, type)						\
-int my_clrsb##suffix(type x) {						\
-    int i;								\
-    int leading = (x >> CHAR_BIT * sizeof (type) - 1) & 1;		\
-    for (i = 1; i < CHAR_BIT * sizeof (type); i++)			\
-	if (((x >> ((CHAR_BIT * sizeof (type)) - i - 1)) & 1)		\
-	    != leading)							\
-	    break;							\
-    return i - 1;							\
-}
-
-MAKE_FUNS (, unsigned);
-
-extern void abort (void);
-extern void exit (int);
-
-#define NUMS16					\
-  {						\
-    0x0000U,					\
-    0x0001U,					\
-    0x8000U,					\
-    0x0002U,					\
-    0x4000U,					\
-    0x0100U,					\
-    0x0080U,					\
-    0xa5a5U,					\
-    0x5a5aU,					\
-    0xcafeU,					\
-    0xffffU					\
-  }
-
-#define NUMS32					\
-  {						\
-    0x00000000UL,				\
-    0x00000001UL,				\
-    0x80000000UL,				\
-    0x00000002UL,				\
-    0x40000000UL,				\
-    0x00010000UL,				\
-    0x00008000UL,				\
-    0xa5a5a5a5UL,				\
-    0x5a5a5a5aUL,				\
-    0xcafe0000UL,				\
-    0x00cafe00UL,				\
-    0x0000cafeUL,				\
-    0xffffffffUL				\
-  }
-
-#define NUMS64					\
-  {						\
-    0x0000000000000000ULL,			\
-    0x0000000000000001ULL,			\
-    0x8000000000000000ULL,			\
-    0x0000000000000002ULL,			\
-    0x4000000000000000ULL,			\
-    0x0000000100000000ULL,			\
-    0x0000000080000000ULL,			\
-    0xa5a5a5a5a5a5a5a5ULL,			\
-    0x5a5a5a5a5a5a5a5aULL,			\
-    0xcafecafe00000000ULL,			\
-    0x0000cafecafe0000ULL,			\
-    0x00000000cafecafeULL,			\
-    0xffffffffffffffffULL			\
-  }
-
-unsigned int ints[] =
-#if BITSIZEOF_INT == 64
-NUMS64;
-#elif BITSIZEOF_INT == 32
-NUMS32;
-#else
-NUMS16;
-#endif
-
-unsigned long longs[] =
-#if BITSIZEOF_LONG == 64
-NUMS64;
-#else
-NUMS32;
-#endif
-
-unsigned long long longlongs[] =
-#if BITSIZEOF_LONG_LONG == 64
-NUMS64;
-#else
-NUMS32;
-#endif
-
-#define N(table) (sizeof (table) / sizeof (table[0]))
-
-int
-main (void)
-{
-  int i;
-
-  check_vect ();
-
-  /* Test constant folding.  */
-
-#define TEST(x, suffix)							\
-  if (__builtin_clrsb##suffix (x) != my_clrsb##suffix (x))		\
-    abort ();								
-
-#if BITSIZEOF_INT == 32
-  TEST(0x00000000UL,);
-  TEST(0x00000001UL,);
-  TEST(0x80000000UL,);
-  TEST(0x40000000UL,);
-  TEST(0x00010000UL,);
-  TEST(0x00008000UL,);
-  TEST(0xa5a5a5a5UL,);
-  TEST(0x5a5a5a5aUL,);
-  TEST(0xcafe0000UL,);
-  TEST(0x00cafe00UL,);
-  TEST(0x0000cafeUL,);
-  TEST(0xffffffffUL,);
-#endif
-
-  exit (0);
-}
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break_75.c b/gcc/testsuite/gcc.dg/vect/vect-early-break_75.c
deleted file mode 100644
index ed27f8635730..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break_75.c
+++ /dev/null
@@ -1,234 +0,0 @@
-/* { dg-add-options vect_early_break } */
-/* { dg-require-effective-target vect_early_break_hw } */
-/* { dg-require-effective-target vect_int } */
-
-/* { dg-additional-options "-O3" } */
-/* { dg-final { scan-tree-dump "LOOP VECTORIZED" "vect" { target { ! "x86_64-*-* i?86-*-*" } } } } */
-
-#include <limits.h>
-#include <assert.h>
-
-#include "tree-vect.h"
-
-#if __INT_MAX__ > 2147483647L
-# if __INT_MAX__ >= 9223372036854775807L
-#  define BITSIZEOF_INT 64
-# else
-#  define BITSIZEOF_INT 32
-# endif
-#else
-# if __INT_MAX__ >= 2147483647L
-#  define BITSIZEOF_INT 32
-# else
-#  define BITSIZEOF_INT 16
-# endif
-#endif
-
-#if __LONG_MAX__ > 2147483647L
-# if __LONG_MAX__ >= 9223372036854775807L
-#  define BITSIZEOF_LONG 64
-# else
-#  define BITSIZEOF_LONG 32
-# endif
-#else
-# define BITSIZEOF_LONG 32
-#endif
-
-#if __LONG_LONG_MAX__ > 2147483647L
-# if __LONG_LONG_MAX__ >= 9223372036854775807L
-#  define BITSIZEOF_LONG_LONG 64
-# else
-#  define BITSIZEOF_LONG_LONG 32
-# endif
-#else
-# define BITSIZEOF_LONG_LONG 32
-#endif
-
-#define MAKE_FUNS(suffix, type)						\
-__attribute__((noinline)) \
-int my_ffs##suffix(type x) {						\
-    int i;								\
-    if (x == 0)								\
-	 return 0; 							\
-    for (i = 0; i < CHAR_BIT * sizeof (type); i++)			\
-	if (x & ((type) 1  << i))					\
-	    break;							\
-    return i + 1;							\
-}									\
-									\
-int my_ctz##suffix(type x) {						\
-    int i;								\
-    for (i = 0; i < CHAR_BIT * sizeof (type); i++)			\
-	if (x & ((type) 1  << i))					\
-	    break;							\
-    return i;								\
-}									\
-									\
-__attribute__((noinline)) \
-int my_clz##suffix(type x) {						\
-    int i;								\
-    for (i = 0; i < CHAR_BIT * sizeof (type); i++)			\
-	if (x & ((type) 1 << ((CHAR_BIT * sizeof (type)) - i - 1)))	\
-	    break;							\
-    return i;								\
-}									\
-									\
-int my_clrsb##suffix(type x) {						\
-    int i;								\
-    int leading = (x >> CHAR_BIT * sizeof (type) - 1) & 1;		\
-    for (i = 1; i < CHAR_BIT * sizeof (type); i++)			\
-	if (((x >> ((CHAR_BIT * sizeof (type)) - i - 1)) & 1)		\
-	    != leading)							\
-	    break;							\
-    return i - 1;							\
-}									\
-									\
-__attribute__((noinline)) \
-int my_popcount##suffix(type x) {					\
-    int i;								\
-    int count = 0;							\
-    for (i = 0; i < CHAR_BIT * sizeof (type); i++)			\
-	if (x & ((type) 1 << i))					\
-	    count++;							\
-    return count;							\
-}									\
-									\
-__attribute__((noinline)) \
-int my_parity##suffix(type x) {						\
-    int i;								\
-    int count = 0;							\
-    for (i = 0; i < CHAR_BIT * sizeof (type); i++)			\
-	if (x & ((type) 1 << i))					\
-	    count++;							\
-    return count & 1;							\
-}
-
-MAKE_FUNS (ll, unsigned long long);
-
-extern void abort (void);
-extern void exit (int);
-
-#define NUMS16					\
-  {						\
-    0x0000U,					\
-    0x0001U,					\
-    0x8000U,					\
-    0x0002U,					\
-    0x4000U,					\
-    0x0100U,					\
-    0x0080U,					\
-    0xa5a5U,					\
-    0x5a5aU,					\
-    0xcafeU,					\
-    0xffffU					\
-  }
-
-#define NUMS32					\
-  {						\
-    0x00000000UL,				\
-    0x00000001UL,				\
-    0x80000000UL,				\
-    0x00000002UL,				\
-    0x40000000UL,				\
-    0x00010000UL,				\
-    0x00008000UL,				\
-    0xa5a5a5a5UL,				\
-    0x5a5a5a5aUL,				\
-    0xcafe0000UL,				\
-    0x00cafe00UL,				\
-    0x0000cafeUL,				\
-    0xffffffffUL				\
-  }
-
-#define NUMS64					\
-  {						\
-    0x0000000000000000ULL,			\
-    0x0000000000000001ULL,			\
-    0x8000000000000000ULL,			\
-    0x0000000000000002ULL,			\
-    0x4000000000000000ULL,			\
-    0x0000000100000000ULL,			\
-    0x0000000080000000ULL,			\
-    0xa5a5a5a5a5a5a5a5ULL,			\
-    0x5a5a5a5a5a5a5a5aULL,			\
-    0xcafecafe00000000ULL,			\
-    0x0000cafecafe0000ULL,			\
-    0x00000000cafecafeULL,			\
-    0xffffffffffffffffULL			\
-  }
-
-unsigned int ints[] =
-#if BITSIZEOF_INT == 64
-NUMS64;
-#elif BITSIZEOF_INT == 32
-NUMS32;
-#else
-NUMS16;
-#endif
-
-unsigned long longs[] =
-#if BITSIZEOF_LONG == 64
-NUMS64;
-#else
-NUMS32;
-#endif
-
-unsigned long long longlongs[] =
-#if BITSIZEOF_LONG_LONG == 64
-NUMS64;
-#else
-NUMS32;
-#endif
-
-#define N(table) (sizeof (table) / sizeof (table[0]))
-
-int
-main (void)
-{
-  int i;
-
-  check_vect ();
-
-#pragma GCC novector
-  for (i = 0; i < N(longlongs); i++)
-    {
-      if (__builtin_ffsll (longlongs[i]) != my_ffsll (longlongs[i]))
-	abort ();
-      if (longlongs[i] != 0
-	  && __builtin_clzll (longlongs[i]) != my_clzll (longlongs[i]))
-	abort ();
-      if (longlongs[i] != 0
-	  && __builtin_ctzll (longlongs[i]) != my_ctzll (longlongs[i]))
-	abort ();
-      if (__builtin_clrsbll (longlongs[i]) != my_clrsbll (longlongs[i]))
-	abort ();
-      if (__builtin_popcountll (longlongs[i]) != my_popcountll (longlongs[i]))
-	abort ();
-      if (__builtin_parityll (longlongs[i]) != my_parityll (longlongs[i]))
-	abort ();
-    }
-
-  /* Test constant folding.  */
-
-#define TEST(x, suffix)							\
-  if (__builtin_ffs##suffix (x) != my_ffs##suffix (x))			\
-    abort ();								\
-
-#if BITSIZEOF_LONG_LONG == 64
-  TEST(0x0000000000000000ULL, ll);
-  TEST(0x0000000000000001ULL, ll);
-  TEST(0x8000000000000000ULL, ll);
-  TEST(0x0000000000000002ULL, ll);
-  TEST(0x4000000000000000ULL, ll);
-  TEST(0x0000000100000000ULL, ll);
-  TEST(0x0000000080000000ULL, ll);
-  TEST(0xa5a5a5a5a5a5a5a5ULL, ll);
-  TEST(0x5a5a5a5a5a5a5a5aULL, ll);
-  TEST(0xcafecafe00000000ULL, ll);
-  TEST(0x0000cafecafe0000ULL, ll);
-  TEST(0x00000000cafecafeULL, ll);
-  TEST(0xffffffffffffffffULL, ll);
-#endif
-
-  exit (0);
-}
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break_76.c b/gcc/testsuite/gcc.dg/vect/vect-early-break_76.c
deleted file mode 100644
index a7d8e279c670..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break_76.c
+++ /dev/null
@@ -1,169 +0,0 @@
-/* { dg-add-options vect_early_break } */
-/* { dg-require-effective-target vect_early_break_hw } */
-/* { dg-require-effective-target vect_int } */
-
-/* { dg-additional-options "-O3" } */
-/* { dg-final { scan-tree-dump "LOOP VECTORIZED" "vect" { target { ! "x86_64-*-* i?86-*-*" } } } } */
-
-#include <limits.h>
-#include <assert.h>
-
-#include "tree-vect.h"
-
-#if __INT_MAX__ > 2147483647L
-# if __INT_MAX__ >= 9223372036854775807L
-#  define BITSIZEOF_INT 64
-# else
-#  define BITSIZEOF_INT 32
-# endif
-#else
-# if __INT_MAX__ >= 2147483647L
-#  define BITSIZEOF_INT 32
-# else
-#  define BITSIZEOF_INT 16
-# endif
-#endif
-
-#if __LONG_MAX__ > 2147483647L
-# if __LONG_MAX__ >= 9223372036854775807L
-#  define BITSIZEOF_LONG 64
-# else
-#  define BITSIZEOF_LONG 32
-# endif
-#else
-# define BITSIZEOF_LONG 32
-#endif
-
-#if __LONG_LONG_MAX__ > 2147483647L
-# if __LONG_LONG_MAX__ >= 9223372036854775807L
-#  define BITSIZEOF_LONG_LONG 64
-# else
-#  define BITSIZEOF_LONG_LONG 32
-# endif
-#else
-# define BITSIZEOF_LONG_LONG 32
-#endif
-
-#define MAKE_FUNS(suffix, type)						\
-int my_clrsb##suffix(type x) {						\
-    int i;								\
-    int leading = (x >> CHAR_BIT * sizeof (type) - 1) & 1;		\
-    for (i = 1; i < CHAR_BIT * sizeof (type); i++)			\
-	if (((x >> ((CHAR_BIT * sizeof (type)) - i - 1)) & 1)		\
-	    != leading)							\
-	    break;							\
-    return i - 1;							\
-}									\
-									\
-
-MAKE_FUNS (, unsigned);
-MAKE_FUNS (ll, unsigned long long);
-
-extern void abort (void);
-extern void exit (int);
-
-#define NUMS16					\
-  {						\
-    0x0000U,					\
-    0x0001U,					\
-    0x8000U,					\
-    0x0002U,					\
-    0x4000U,					\
-    0x0100U,					\
-    0x0080U,					\
-    0xa5a5U,					\
-    0x5a5aU,					\
-    0xcafeU,					\
-    0xffffU					\
-  }
-
-#define NUMS32					\
-  {						\
-    0x00000000UL,				\
-    0x00000001UL,				\
-    0x80000000UL,				\
-    0x00000002UL,				\
-    0x40000000UL,				\
-    0x00010000UL,				\
-    0x00008000UL,				\
-    0xa5a5a5a5UL,				\
-    0x5a5a5a5aUL,				\
-    0xcafe0000UL,				\
-    0x00cafe00UL,				\
-    0x0000cafeUL,				\
-    0xffffffffUL				\
-  }
-
-#define NUMS64					\
-  {						\
-    0x0000000000000000ULL,			\
-    0x0000000000000001ULL,			\
-    0x8000000000000000ULL,			\
-    0x0000000000000002ULL,			\
-    0x4000000000000000ULL,			\
-    0x0000000100000000ULL,			\
-    0x0000000080000000ULL,			\
-    0xa5a5a5a5a5a5a5a5ULL,			\
-    0x5a5a5a5a5a5a5a5aULL,			\
-    0xcafecafe00000000ULL,			\
-    0x0000cafecafe0000ULL,			\
-    0x00000000cafecafeULL,			\
-    0xffffffffffffffffULL			\
-  }
-
-unsigned int ints[] =
-#if BITSIZEOF_INT == 64
-NUMS64;
-#elif BITSIZEOF_INT == 32
-NUMS32;
-#else
-NUMS16;
-#endif
-
-unsigned long longs[] =
-#if BITSIZEOF_LONG == 64
-NUMS64;
-#else
-NUMS32;
-#endif
-
-unsigned long long longlongs[] =
-#if BITSIZEOF_LONG_LONG == 64
-NUMS64;
-#else
-NUMS32;
-#endif
-
-#define N(table) (sizeof (table) / sizeof (table[0]))
-
-int
-main (void)
-{
-  int i;
-
-  check_vect ();
-
-#pragma GCC novector
-  for (i = 0; i < N(ints); i++)
-    {
-      if (__builtin_clrsb (ints[i]) != my_clrsb (ints[i]))
-	abort ();
-    }
-
-  /* Test constant folding.  */
-
-#define TEST(x, suffix)							\
-  if (__builtin_clrsb##suffix (x) != my_clrsb##suffix (x))		\
-    abort ();								
-
-#if BITSIZEOF_LONG_LONG == 64
-  TEST(0xffffffffffffffffULL, ll);
-  TEST(0xffffffffffffffffULL, ll);
-  TEST(0xffffffffffffffffULL, ll);
-  TEST(0xffffffffffffffffULL, ll);
-  TEST(0xffffffffffffffffULL, ll);
-  TEST(0xffffffffffffffffULL, ll);
-#endif
-
-  exit (0);
-}
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break_77.c b/gcc/testsuite/gcc.dg/vect/vect-early-break_77.c
deleted file mode 100644
index 225106aab0a3..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break_77.c
+++ /dev/null
@@ -1,34 +0,0 @@
-/* { dg-add-options vect_early_break } */
-/* { dg-require-effective-target vect_early_break_hw } */
-/* { dg-require-effective-target vect_int } */
-
-/* { dg-additional-options "-O3" } */
-/* { dg-final { scan-tree-dump "LOOP VECTORIZED" "vect" } } */
-
-#include "tree-vect.h"
-
-double x[1024];
-int a[1024];
-double __attribute__((noipa)) foo  ()
-{
-  double sum = 0.0;
-  for (int i = 0 ; i < 1023; ++i)
-    {
-      sum += x[i];
-      if (a[i])
-        break;
-    }
-  return sum;
-}
-
-int main()
-{
-  check_vect ();
-
-  for (int i = 0; i < 1024; ++i)
-    x[i] = i;
-  a[19] = 1;
-  if (foo () != 190.)
-    __builtin_abort ();
-  return 0;
-}
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break_78.c b/gcc/testsuite/gcc.dg/vect/vect-early-break_78.c
deleted file mode 100644
index f93babc069e1..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break_78.c
+++ /dev/null
@@ -1,77 +0,0 @@
-/* { dg-add-options vect_early_break } */
-/* { dg-require-effective-target vect_early_break_hw } */
-/* { dg-require-effective-target vect_int } */
-
-/* { dg-additional-options "-O3" } */
-/* { dg-final { scan-tree-dump "LOOP VECTORIZED" "vect" { target { ! "x86_64-*-* i?86-*-*" } } } } */
-
-#include <limits.h>
-#include <assert.h>
-
-#include "tree-vect.h"
-
-#if __INT_MAX__ > 2147483647L
-# if __INT_MAX__ >= 9223372036854775807L
-#  define BITSIZEOF_INT 64
-# else
-#  define BITSIZEOF_INT 32
-# endif
-#else
-# if __INT_MAX__ >= 2147483647L
-#  define BITSIZEOF_INT 32
-# else
-#  define BITSIZEOF_INT 16
-# endif
-#endif
-
-#if __LONG_MAX__ > 2147483647L
-# if __LONG_MAX__ >= 9223372036854775807L
-#  define BITSIZEOF_LONG 64
-# else
-#  define BITSIZEOF_LONG 32
-# endif
-#else
-# define BITSIZEOF_LONG 32
-#endif
-
-#if __LONG_LONG_MAX__ > 2147483647L
-# if __LONG_LONG_MAX__ >= 9223372036854775807L
-#  define BITSIZEOF_LONG_LONG 64
-# else
-#  define BITSIZEOF_LONG_LONG 32
-# endif
-#else
-# define BITSIZEOF_LONG_LONG 32
-#endif
-
-#define MAKE_FUNS(suffix, type)						\
-int my_clrsb##suffix(type x) {						\
-    int i;								\
-    int leading = (x >> CHAR_BIT * sizeof (type) - 1) & 1;		\
-    for (i = 1; i < CHAR_BIT * sizeof (type); i++)			\
-	if (((x >> ((CHAR_BIT * sizeof (type)) - i - 1)) & 1)		\
-	    != leading)							\
-	    break;							\
-    return i - 1;							\
-}
-
-MAKE_FUNS (, unsigned);
-
-extern void abort (void);
-extern void exit (int);
-
-
-int
-main (void)
-{
-  check_vect ();
-
-#define TEST(x, suffix)							\
-  if (__builtin_clrsb##suffix (x) != my_clrsb##suffix (x))		\
-    abort ();								
-
-#if BITSIZEOF_INT == 32
-  TEST(0xffffffffUL,);
-#endif
-  exit (0);
-}
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break_79.c b/gcc/testsuite/gcc.dg/vect/vect-early-break_79.c
deleted file mode 100644
index 3f21be762514..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break_79.c
+++ /dev/null
@@ -1,28 +0,0 @@
-/* { dg-add-options vect_early_break } */
-/* { dg-do compile } */
-/* { dg-require-effective-target vect_early_break } */
-/* { dg-require-effective-target vect_int } */
-
-/* { dg-additional-options "-Ofast" } */
-
-/* { dg-final { scan-tree-dump-not "LOOP VECTORIZED" "vect" } } */
-
-#undef N
-#define N 32
-
-unsigned vect_a[N];
-unsigned vect_b[N];
-  
-unsigned test4(unsigned x)
-{
- unsigned ret = 0;
- for (int i = 0; i < 1024; i++)
- {
-   vect_b[i] = x + i;
-   if (vect_a[i] > x)
-     break;
-   vect_a[i] = x;
-   
- }
- return ret;
-}
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break_8.c b/gcc/testsuite/gcc.dg/vect/vect-early-break_8.c
deleted file mode 100644
index 84e19423e2e6..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break_8.c
+++ /dev/null
@@ -1,28 +0,0 @@
-/* { dg-add-options vect_early_break } */
-/* { dg-do compile } */
-/* { dg-require-effective-target vect_early_break } */
-/* { dg-require-effective-target vect_int } */
-
-/* { dg-additional-options "-Ofast" } */
-
-/* { dg-final { scan-tree-dump-not "LOOP VECTORIZED" "vect" } } */
-
-#include <complex.h>
-
-#define N 1024
-char vect_a[N];
-char vect_b[N];
-  
-char test4(char x, char * restrict res)
-{
- char ret = 0;
- for (int i = 0; i < N; i++)
- {
-   vect_b[i] += x + i;
-   if (vect_a[i] > x)
-     break;
-   vect_a[i] += x * vect_b[i];
-   res[i] *= vect_b[i];
- }
- return ret;
-}
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break_80.c b/gcc/testsuite/gcc.dg/vect/vect-early-break_80.c
deleted file mode 100644
index 7f563b788ac7..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break_80.c
+++ /dev/null
@@ -1,49 +0,0 @@
-/* { dg-add-options vect_early_break } */
-/* { dg-require-effective-target vect_early_break_hw } */
-/* { dg-require-effective-target vect_int } */
-
-/* { dg-additional-options "-Ofast" } */
-
-/* { dg-final { scan-tree-dump "LOOP VECTORIZED" "vect" } } */
-
-#include "tree-vect.h"
-
-extern void abort ();
-
-int x;
-__attribute__ ((noinline, noipa))
-void foo (int *a, int *b)
-{
-  int local_x = x;
-  for (int i = 0; i < 1024; ++i)
-    {
-      if (i + local_x == 13)
-        break;
-      a[i] = 2 * b[i];
-    }
-}
-
-int main ()
-{
-
-  check_vect ();
-
-  int a[1024] = {0};
-  int b[1024] = {0};
-
-  for (int i = 0; i < 1024; i++)
-    b[i] = i;
-
-  x = -512;
-  foo (a, b);
-
-  if (a[524] != 1048)
-    abort ();
-
-  if (a[525] != 0)
-    abort ();
-
-  if (a[1023] != 0)
-    abort ();
-  return 0;
-}
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break_81.c b/gcc/testsuite/gcc.dg/vect/vect-early-break_81.c
deleted file mode 100644
index 8a8c076ba92c..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break_81.c
+++ /dev/null
@@ -1,31 +0,0 @@
-/* { dg-add-options vect_early_break } */
-/* { dg-do compile } */
-/* { dg-require-effective-target vect_early_break } */
-/* { dg-require-effective-target vect_int } */
-
-/* { dg-additional-options "-Ofast" } */
-
-/* { dg-final { scan-tree-dump "LOOP VECTORIZED" "vect" } } */
-/* { dg-final { scan-tree-dump "epilog loop required" "vect" } } */
-void abort ();
-
-unsigned short sa[32];
-unsigned short sc[32] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,
-  16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31};
-unsigned short sb[32] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,
-  16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31};
-unsigned int ia[32];
-unsigned int ic[32] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,
-        0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};
-unsigned int ib[32] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,
-        0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};
-
-int main2 (int n)
-{
-  int i;
-  for (i = 0; i < n - 3; i++)
-    {
-      if (sa[i+3] != sb[i] + sc[i] || ia[i+3] != ib[i] + ic[i])
-        abort ();
-    }
-}
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break_82.c b/gcc/testsuite/gcc.dg/vect/vect-early-break_82.c
deleted file mode 100644
index 0e9b2d8d385c..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break_82.c
+++ /dev/null
@@ -1,28 +0,0 @@
-/* { dg-add-options vect_early_break } */
-/* { dg-do compile } */
-/* { dg-require-effective-target vect_early_break } */
-/* { dg-require-effective-target vect_int } */
-
-/* { dg-additional-options "-Ofast" } */
-
-/* { dg-final { scan-tree-dump "LOOP VECTORIZED" "vect" } } */
-
-#include <complex.h>
-
-#define N 1024
-complex double vect_a[N];
-complex double vect_b[N];
-  
-complex double test4(complex double x, complex double t)
-{
- complex double ret = 0;
- for (int i = 0; i < N; i++)
- {
-   vect_a[i] = t + i;
-   if (vect_a[i] == x)
-     return i;
-   vect_a[i] += x * vect_a[i];
-   
- }
- return ret;
-}
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break_83.c b/gcc/testsuite/gcc.dg/vect/vect-early-break_83.c
deleted file mode 100644
index 8b0e3fd6c5f5..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break_83.c
+++ /dev/null
@@ -1,29 +0,0 @@
-/* { dg-add-options vect_early_break } */
-/* { dg-do compile } */
-/* { dg-require-effective-target vect_early_break } */
-/* { dg-require-effective-target vect_int } */
-
-/* { dg-additional-options "-Ofast" } */
-
-/* { dg-final { scan-tree-dump-not "LOOP VECTORIZED" "vect" } } */
-
-#include <complex.h>
-
-#define N 1024
-complex double vect_a[N];
-complex double vect_b[N];
-  
-complex double test4(complex double x)
-{
- complex double ret = 0;
- for (int i = 0; i < N; i++)
- {
-   volatile complex double z = vect_b[i];
-   vect_b[i] = x + i + z;
-   if (vect_a[i] == x)
-     return i;
-   vect_a[i] += x * vect_b[i];
-   
- }
- return ret;
-}
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break_84.c b/gcc/testsuite/gcc.dg/vect/vect-early-break_84.c
deleted file mode 100644
index 242ba453533e..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break_84.c
+++ /dev/null
@@ -1,44 +0,0 @@
-/* { dg-add-options vect_early_break } */
-/* { dg-require-effective-target vect_early_break_hw } */
-/* { dg-require-effective-target vect_int } */
-
-/* { dg-final { scan-tree-dump "LOOP VECTORIZED" "vect" { target { ! "x86_64-*-* i?86-*-*" } } } } */
-
-#include <stdbool.h>
-
-#include "tree-vect.h"
-
-#ifndef N
-#define N 17
-#endif
-bool vect_a[N] = { false, false, true, false, false, false,
-                   false, false, false, false, false, false,
-                   false, false, false, false, false };
-unsigned vect_b[N] = { 0 };
-
-__attribute__ ((noinline, noipa))
-unsigned test4(bool x)
-{
- unsigned ret = 0;
- for (int i = 0; i < N; i++)
- {
-   if (vect_a[i] == x)
-     return 1;
-   vect_a[i] = x;
-   
- }
- return ret;
-}
-
-extern void abort ();
-
-int main ()
-{
-  check_vect ();
-
-  if (test4 (true) != 1)
-    abort ();
-
-  if (vect_b[2] != 0 && vect_b[1] == 0)
-    abort ();
-}
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break_85.c b/gcc/testsuite/gcc.dg/vect/vect-early-break_85.c
deleted file mode 100644
index 3df376935735..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break_85.c
+++ /dev/null
@@ -1,40 +0,0 @@
-/* { dg-add-options vect_early_break } */
-/* { dg-require-effective-target vect_early_break_hw } */
-/* { dg-require-effective-target vect_int } */
-
-/* { dg-final { scan-tree-dump "LOOP VECTORIZED" "vect" } } */
-
-#include "tree-vect.h"
-
-#ifndef N
-#define N 5
-#endif
-int vect_a[N] = { 5, 4, 8, 4, 6 };
-unsigned vect_b[N] = { 0 };
-
-__attribute__ ((noinline, noipa))
-unsigned test4(int x)
-{
- unsigned ret = 0;
- for (int i = 0; i < N; i++)
- {
-   if (vect_a[i] > x)
-     return 1;
-   vect_a[i] = x;
-   
- }
- return ret;
-}
-
-extern void abort ();
-
-int main ()
-{
-  check_vect ();
-
-  if (test4 (7) != 1)
-    abort ();
-
-  if (vect_b[2] != 0 && vect_b[1] == 0)
-    abort ();
-}
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break_86.c b/gcc/testsuite/gcc.dg/vect/vect-early-break_86.c
deleted file mode 100644
index 85c0d3a92772..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break_86.c
+++ /dev/null
@@ -1,26 +0,0 @@
-/* { dg-add-options vect_early_break } */
-/* { dg-additional-options "-std=gnu89" } */
-/* { dg-require-effective-target vect_early_break_hw } */
-/* { dg-require-effective-target vect_int } */
-
-/* { dg-final { scan-tree-dump "LOOP VECTORIZED" "vect" { target { ! "x86_64-*-* i?86-*-*" } } } } */
-
-#include "tree-vect.h"
-
-extern void abort ();
-extern void exit (int);
-
-__attribute__((noinline, noipa))
-int f(x) {
-  int i;
-  for (i = 0; i < 8 && (x & 1) == 1; i++)
-    x >>= 1;
-  return i;
-}
-main() {
-  check_vect ();
-
-  if (f(4) != 0)
-    abort();
-  exit(0);
-}
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break_87.c b/gcc/testsuite/gcc.dg/vect/vect-early-break_87.c
deleted file mode 100644
index 3dce0c439bff..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break_87.c
+++ /dev/null
@@ -1,26 +0,0 @@
-/* { dg-add-options vect_early_break } */
-/* { dg-additional-options "-std=gnu89" } */
-/* { dg-require-effective-target vect_early_break_hw } */
-/* { dg-require-effective-target vect_int } */
-
-/* { dg-final { scan-tree-dump "LOOP VECTORIZED" "vect" { target { ! "x86_64-*-* i?86-*-*" } } } } */
-
-#include "tree-vect.h"
-
-extern void abort ();
-extern void exit (int);
-
-__attribute__((noinline, noipa))
-int f(x) {
-  int i;
-  for (i = 0; i < 8 && (x & 1) == 0; i++)
-    x >>= 1;
-  return i;
-}
-main() {
-  check_vect ();
-
-  if (f(4) != 2)
-    abort();
-  exit(0);
-}
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break_88.c b/gcc/testsuite/gcc.dg/vect/vect-early-break_88.c
deleted file mode 100644
index b392dd465539..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break_88.c
+++ /dev/null
@@ -1,41 +0,0 @@
-/* { dg-add-options vect_early_break } */
-/* { dg-require-effective-target vect_early_break_hw } */
-/* { dg-require-effective-target vect_int } */
-
-/* { dg-additional-options "-Ofast --param vect-partial-vector-usage=2" } */
-/* { dg-final { scan-tree-dump "LOOP VECTORIZED" "vect" } } */
-
-#include "tree-vect.h"
-
-#ifndef N
-#define N 5
-#endif
-float vect_a[N] = { 5.1f, 4.2f, 8.0f, 4.25f, 6.5f };
-unsigned vect_b[N] = { 0 };
-
-__attribute__ ((noinline, noipa))
-unsigned test4(double x)
-{
- unsigned ret = 0;
- for (int i = 0; i < N; i++)
- {
-   if (vect_a[i] > x)
-     break;
-   vect_a[i] = x;
-   
- }
- return ret;
-}
-
-extern void abort ();
-
-int main ()
-{
-  check_vect ();
-
-  if (test4 (7.0) != 0)
-    abort ();
-
-  if (vect_b[2] != 0 && vect_b[1] == 0)
-    abort ();
-}
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break_89.c b/gcc/testsuite/gcc.dg/vect/vect-early-break_89.c
deleted file mode 100644
index 39b6313b3a15..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break_89.c
+++ /dev/null
@@ -1,21 +0,0 @@
-/* { dg-add-options vect_early_break } */
-/* { dg-do compile } */
-/* { dg-require-effective-target vect_int } */
-/* { dg-additional-options "-w" } */
-
-char *a;
-extern void d();
-void b() {
-  int c = 0;
-  while (c < 16) {
-    switch (a[c]) {
-    case '"':
-    case '\'':
-      c++;
-      continue;
-    }
-    break;
-  }
-  if (c)
-    d();
-}
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break_9.c b/gcc/testsuite/gcc.dg/vect/vect-early-break_9.c
deleted file mode 100644
index 12f09c61c331..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break_9.c
+++ /dev/null
@@ -1,28 +0,0 @@
-/* { dg-add-options vect_early_break } */
-/* { dg-do compile } */
-/* { dg-require-effective-target vect_early_break } */
-/* { dg-require-effective-target vect_int } */
-
-/* { dg-additional-options "-Ofast" } */
-
-/* { dg-final { scan-tree-dump "LOOP VECTORIZED" "vect" } } */
-
-#ifndef N
-#define N 803
-#endif
-unsigned vect_a[N];
-unsigned vect_b[N];
-  
-unsigned test4(unsigned x)
-{
- unsigned ret = 0;
- for (int i = 0; i < N; i++)
- {
-   vect_a[i] = x + i;
-   if (vect_a[i] > x)
-     break;
-   vect_a[i] = x;
-   
- }
- return ret;
-}
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break_90.c b/gcc/testsuite/gcc.dg/vect/vect-early-break_90.c
deleted file mode 100644
index ac390b6ede47..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break_90.c
+++ /dev/null
@@ -1,48 +0,0 @@
-/* { dg-add-options vect_early_break } */
-/* { dg-require-effective-target vect_early_break_hw } */
-/* { dg-require-effective-target vect_int } */
-
-/* { dg-final { scan-tree-dump "LOOP VECTORIZED" "vect" } } */
-
-#include "tree-vect.h"
-
-#ifndef N
-#define N 30
-#endif
-
-#ifndef IDX
-#define IDX 1
-#endif
-
-int n_earlyclobbers;
-
-typedef void* rtx;
-rtx reload_earlyclobbers[N] = {0};
-
-rtx foo = (void*)0xbadf00d;
-
-int
-__attribute__((noinline, noipa))
-earlyclobber_operand_p (rtx x)
-{
-  int i;
-
-  for (i = 0; i < n_earlyclobbers; i++)
-    if (reload_earlyclobbers[i] == x)
-      return 1;
-
-  return 0;
-}
-
-extern void abort ();
-
-int main ()
-{
-  check_vect ();
-
-  n_earlyclobbers = IDX;
-  if (earlyclobber_operand_p (foo))
-    abort ();
-
-  return 0;
-}
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break_91.c b/gcc/testsuite/gcc.dg/vect/vect-early-break_91.c
deleted file mode 100644
index 4b1c558f8a33..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break_91.c
+++ /dev/null
@@ -1,48 +0,0 @@
-/* { dg-add-options vect_early_break } */
-/* { dg-require-effective-target vect_early_break_hw } */
-/* { dg-require-effective-target vect_int } */
-
-/* { dg-final { scan-tree-dump "LOOP VECTORIZED" "vect" } } */
-
-#include "tree-vect.h"
-
-#ifndef N
-#define N 30
-#endif
-
-#ifndef IDX
-#define IDX 0
-#endif
-
-int n_earlyclobbers;
-
-typedef void* rtx;
-rtx reload_earlyclobbers[N] = {0};
-
-rtx foo = (void*)0xbadf00d;
-
-int
-__attribute__((noinline, noipa))
-earlyclobber_operand_p (rtx x)
-{
-  int i;
-
-  for (i = 0; i < n_earlyclobbers; i++)
-    if (reload_earlyclobbers[i] == x)
-      return 1;
-
-  return 0;
-}
-
-extern void abort ();
-
-int main ()
-{
-  check_vect ();
-
-  n_earlyclobbers = IDX;
-  if (earlyclobber_operand_p (foo))
-    abort ();
-
-  return 0;
-}
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break_92.c b/gcc/testsuite/gcc.dg/vect/vect-early-break_92.c
deleted file mode 100644
index 1b2403b338fd..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break_92.c
+++ /dev/null
@@ -1,48 +0,0 @@
-/* { dg-add-options vect_early_break } */
-/* { dg-require-effective-target vect_early_break_hw } */
-/* { dg-require-effective-target vect_int } */
-
-/* { dg-final { scan-tree-dump "LOOP VECTORIZED" "vect" } } */
-
-#include "tree-vect.h"
-
-#ifndef N
-#define N 30
-#endif
-
-#ifndef IDX
-#define IDX 15
-#endif
-
-int n_earlyclobbers;
-
-typedef void* rtx;
-rtx reload_earlyclobbers[N] = {0};
-
-rtx foo = (void*)0xbadf00d;
-
-int
-__attribute__((noinline, noipa))
-earlyclobber_operand_p (rtx x)
-{
-  int i;
-
-  for (i = 0; i < n_earlyclobbers; i++)
-    if (reload_earlyclobbers[i] == x)
-      return 1;
-
-  return 0;
-}
-
-extern void abort ();
-
-int main ()
-{
-  check_vect ();
-
-  n_earlyclobbers = IDX;
-  if (earlyclobber_operand_p (foo))
-    abort ();
-
-  return 0;
-}
diff --git a/gcc/testsuite/gcc.dg/vect/vect-early-break_93.c b/gcc/testsuite/gcc.dg/vect/vect-early-break_93.c
deleted file mode 100644
index 656a7788896d..000000000000
--- a/gcc/testsuite/gcc.dg/vect/vect-early-break_93.c
+++ /dev/null
@@ -1,48 +0,0 @@
-/* { dg-add-options vect_early_break } */
-/* { dg-require-effective-target vect_early_break_hw } */
-/* { dg-require-effective-target vect_int } */
-
-/* { dg-final { scan-tree-dump "LOOP VECTORIZED" "vect" } } */
-
-#include "tree-vect.h"
-
-#ifndef N
-#define N 30
-#endif
-
-#ifndef IDX
-#define IDX 29
-#endif
-
-int n_earlyclobbers;
-
-typedef void* rtx;
-rtx reload_earlyclobbers[N] = {0};
-
-rtx foo = (void*)0xbadf00d;
-
-int
-__attribute__((noinline, noipa))
-earlyclobber_operand_p (rtx x)
-{
-  int i;
-
-  for (i = 0; i < n_earlyclobbers; i++)
-    if (reload_earlyclobbers[i] == x)
-      return 1;
-
-  return 0;
-}
-
-extern void abort ();
-
-int main ()
-{
-  check_vect ();
-
-  n_earlyclobbers = IDX;
-  if (earlyclobber_operand_p (foo))
-    abort ();
-
-  return 0;
-}
diff --git a/gcc/testsuite/lib/target-supports.exp b/gcc/testsuite/lib/target-supports.exp
index 05fc417877bc..7f13ff0ca565 100644
--- a/gcc/testsuite/lib/target-supports.exp
+++ b/gcc/testsuite/lib/target-supports.exp
@@ -4050,44 +4050,6 @@ proc check_effective_target_vect_int { } {
 	}}]
 }
 
-# Return 1 if the target supports vectorization of early breaks,
-# 0 otherwise.
-#
-# This won't change for different subtargets so cache the result.
-
-proc check_effective_target_vect_early_break { } {
-    return [check_cached_effective_target_indexed vect_early_break {
-      expr {
-	[istarget aarch64*-*-*]
-	|| [check_effective_target_sse4]
-	}}]
-}
-
-# Return 1 if the target supports hardware execution of early breaks,
-# 0 otherwise.
-#
-# This won't change for different subtargets so cache the result.
-
-proc check_effective_target_vect_early_break_hw { } {
-    return [check_cached_effective_target_indexed vect_early_break_hw {
-      expr {
-	[istarget aarch64*-*-*]
-	|| [check_sse4_hw_available]
-	}}]
-}
-
-proc add_options_for_vect_early_break { flags } {
-    if { ! [check_effective_target_vect_early_break] } {
-	return "$flags"
-    }
-
-    if { [check_effective_target_sse4] } {
-	return "$flags -msse4.1"
-    }
-
-    return "$flags"
-}
-
 # Return 1 if the target supports hardware vectorization of complex additions of
 # byte, 0 otherwise.
 #
-- 
2.43.0

